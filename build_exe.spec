# -*- mode: python ; coding: utf-8 -*-

"""
PyInstaller spec —Ñ–∞–π–ª –¥–ª—è RimWorld Mod Builder v2.0.1
–°—Ç–≤–æ—Ä—é—î –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π .exe —Ñ–∞–π–ª –∑ —É—Å—ñ–º–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É <100MB —Ç–∞ –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
"""

import os
import sys
from pathlib import Path
import site

# –î–æ–¥–∞—î–º–æ src –¥–æ —à–ª—è—Ö—É
current_dir = os.path.dirname(os.path.abspath('build_exe.spec'))
sys.path.insert(0, os.path.join(current_dir, 'src'))

# –ë–∞–∑–æ–≤–∏–π —à–ª—è—Ö –ø—Ä–æ—î–∫—Ç—É
project_root = Path(current_dir)

print("üîß –ü–æ—á–∞—Ç–æ–∫ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó PyInstaller –¥–ª—è RimWorld Mod Builder v2.0.1")
print(f"üìÅ –ö–æ—Ä—ñ–Ω—å –ø—Ä–æ—î–∫—Ç—É: {project_root}")

# –ó–±—ñ—Ä –≤—Å—ñ—Ö Python —Ñ–∞–π–ª—ñ–≤ –∑ src/
src_files = []
for root, dirs, files in os.walk('src'):
    for file in files:
        if file.endswith('.py'):
            src_files.append(os.path.join(root, file))

print(f"üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ Python —Ñ–∞–π–ª—ñ–≤: {len(src_files)}")

# –ó–±—ñ—Ä —à–∞–±–ª–æ–Ω—ñ–≤ XML
template_files = []
templates_dir = project_root / 'src' / 'templates'
if templates_dir.exists():
    for template_file in templates_dir.glob('*.xml'):
        template_files.append((str(template_file), 'src/templates'))

print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω—ñ–≤ XML: {len(template_files)}")

# –ó–±—ñ—Ä —Ä–µ—Å—É—Ä—Å—ñ–≤ CustomTkinter
ctk_data = []
try:
    import customtkinter
    ctk_path = Path(customtkinter.__file__).parent
    
    # –¢–µ–º–∏ CustomTkinter
    themes_dir = ctk_path / 'assets' / 'themes'
    if themes_dir.exists():
        for theme_file in themes_dir.rglob('*'):
            if theme_file.is_file():
                rel_path = theme_file.relative_to(ctk_path)
                ctk_data.append((str(theme_file), f'customtkinter/{rel_path.parent}'))
    
    # –Ü–∫–æ–Ω–∫–∏ —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è CustomTkinter
    assets_dir = ctk_path / 'assets'
    if assets_dir.exists():
        for asset_file in assets_dir.rglob('*'):
            if asset_file.is_file() and asset_file.suffix in ['.png', '.ico', '.gif']:
                rel_path = asset_file.relative_to(ctk_path)
                ctk_data.append((str(asset_file), f'customtkinter/{rel_path.parent}'))
                
except ImportError:
    print("‚ö†Ô∏è CustomTkinter –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

print(f"üé® CustomTkinter —Ä–µ—Å—É—Ä—Å—ñ–≤: {len(ctk_data)}")

# –ó–±—ñ—Ä —Ä–µ—Å—É—Ä—Å—ñ–≤ Pillow (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)
pillow_data = []
try:
    import PIL
    pil_path = Path(PIL.__file__).parent

    # –¢—ñ–ª—å–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤—ñ –ø–ª–∞–≥—ñ–Ω–∏ Pillow
    essential_plugins = [
        'JpegImagePlugin.py',
        'PngImagePlugin.py',
        'BmpImagePlugin.py',
        'TiffImagePlugin.py',
        'WebPImagePlugin.py',
        'IcoImagePlugin.py',
        'GifImagePlugin.py'
    ]

    for plugin_name in essential_plugins:
        plugin_file = pil_path / plugin_name
        if plugin_file.exists():
            pillow_data.append((str(plugin_file), 'PIL'))

    # –î–æ–¥–∞—î–º–æ –±—ñ–Ω–∞—Ä–Ω—ñ —Ñ–∞–π–ª–∏ Pillow
    for binary_file in pil_path.glob('*.pyd'):
        pillow_data.append((str(binary_file), 'PIL'))
    for binary_file in pil_path.glob('*.dll'):
        pillow_data.append((str(binary_file), 'PIL'))

except ImportError:
    print("‚ö†Ô∏è Pillow –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

print(f"üñºÔ∏è Pillow —Ä–µ—Å—É—Ä—Å—ñ–≤: {len(pillow_data)}")

# –ó–±—ñ—Ä –≤—Å—ñ—Ö –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
datas = template_files + ctk_data + pillow_data

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–∞–π–ª–∏ –ø—Ä–æ—î–∫—Ç—É
additional_files = [
    ('requirements.txt', '.'),
    ('README.md', '.'),
    ('RIMWORLD_MOD_BUILDER_GUIDE.md', '.'),
    ('DOTNET_INTEGRATION_GUIDE.md', '.'),
]

for src_file, dest_dir in additional_files:
    if os.path.exists(src_file):
        datas.append((src_file, dest_dir))

# –ü—Ä–∏—Ö–æ–≤–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
hiddenimports = [
    # –û—Å–Ω–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ –ø—Ä–æ—î–∫—Ç—É
    'src.core.dotnet_integration',
    'src.core.template_manager',
    'src.core.project_manager',
    'src.core.csharp_manager',
    'src.core.steam_workshop',
    'src.core.dependency_manager',
    'src.core.mod_validator',
    'src.core.image_formats',
    
    # UI –º–æ–¥—É–ª—ñ
    'src.ui.texture_manager_customtkinter',
    'src.ui.csharp_project_manager',
    'src.ui.csharp_compiler_widget',
    'src.ui.csharp_dialog',
    'src.ui.definition_preview',
    'src.ui.steam_workshop_dialog',
    'src.ui.export_dialog',
    'src.ui.settings_dialog',
    'src.ui.template_dialog',
    'src.ui.smart_xml_editor',
    'src.ui.enhanced_texture_manager',
    'src.ui.dependency_dialog',
    'src.ui.new_project_dialog',
    'src.ui.preview_system',
    'src.ui.file_explorer',
    'src.ui.text_editor',
    'src.ui.log_viewer',
    'src.ui.v2_integration',
    
    # –£—Ç–∏–ª—ñ—Ç–∏
    'src.utils.simple_logger',
    'src.utils.xml_validator',
    'src.utils.xml_validator_simple',
    'src.utils.compatibility_checker',
    'src.utils.performance',
    
    # CustomTkinter —Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    'customtkinter',
    'customtkinter.windows',
    'customtkinter.windows.widgets',
    'tkinter',
    'tkinter.ttk',
    'tkinter.filedialog',
    'tkinter.messagebox',
    'tkinter.colorchooser',
    
    # –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    'PIL',
    'PIL.Image',
    'PIL.ImageTk',
    'PIL.ImageDraw',
    'PIL.ImageFont',
    'PIL.ImageFilter',
    'PIL.ImageEnhance',
    'PIL.ImageOps',
    'PIL.ImageChops',
    'PIL.ImageStat',
    'PIL.ImageSequence',
    'PIL.ImageFile',
    'PIL.ImageMode',
    'PIL.ImagePalette',
    'PIL.ImageColor',
    'PIL.ImageGrab',
    'PIL.ImageShow',
    'PIL.ImageWin',
    'PIL.ImageQt',
    'PIL.ExifTags',
    'PIL.TiffTags',
    'PIL.JpegImagePlugin',
    'PIL.PngImagePlugin',
    'PIL.BmpImagePlugin',
    'PIL.TiffImagePlugin',
    'PIL.WebPImagePlugin',
    'PIL.IcoImagePlugin',
    'PIL.GifImagePlugin',
    
    # PSD –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
    'psd_tools',
    'psd_tools.api',
    'psd_tools.psd',
    'psd_tools.constants',
    
    # XML –æ–±—Ä–æ–±–∫–∞
    'lxml',
    'lxml.etree',
    'lxml.html',
    'xml.etree.ElementTree',
    'xml.dom.minidom',
    
    # –°–∏—Å—Ç–µ–º–Ω—ñ –º–æ–¥—É–ª—ñ
    'subprocess',
    'threading',
    'multiprocessing',
    'queue',
    'tempfile',
    'shutil',
    'zipfile',
    'tarfile',
    'json',
    'configparser',
    'urllib.request',
    'urllib.parse',
    'urllib.error',
    'http.client',
    'socket',
    'ssl',
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    'logging',
    'logging.handlers',
    'traceback',
    'inspect',
    'gc',
    'psutil',
    
    # –ö–æ–ª—å–æ—Ä–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    'colorama',
    'colorama.init',
    'colorama.ansi',
    'colorama.win32',
    
    # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å
    'datetime',
    'time',
    'calendar',
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    'math',
    'random',
    'statistics',
    
    # –†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏
    're',
    'fnmatch',
    'glob',
    
    # –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞
    'pathlib',
    'os.path',
    'stat',
    
    # –ö–æ–¥—É–≤–∞–Ω–Ω—è
    'base64',
    'binascii',
    'codecs',
    'locale',
    
    # –ú–µ—Ä–µ–∂–∞ (–¥–ª—è Steam Workshop)
    'requests',
    'urllib3',
    
    # Windows —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ
    'winreg',
    'msvcrt',
    'winsound',
    
    # .NET —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
    'ctypes',
    'ctypes.wintypes',
]

# –í–∏–∫–ª—é—á–µ–Ω—ñ –º–æ–¥—É–ª—ñ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
excludes = [
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    'pytest',
    'unittest',
    'doctest',
    'test',
    'tests',
    
    # –†–æ–∑—Ä–æ–±–∫–∞
    'pdb',
    'pydoc',
    'profile',
    'cProfile',
    'pstats',
    'timeit',
    
    # Jupyter/IPython
    'IPython',
    'jupyter',
    'notebook',
    'ipykernel',
    
    # Matplotlib (—è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
    'matplotlib',
    'numpy',
    'scipy',
    'pandas',
    
    # PyQt/PySide (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CustomTkinter)
    'PyQt5',
    'PyQt6',
    'PySide2',
    'PySide6',
    
    # –Ü–Ω—à—ñ GUI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
    'wx',
    'kivy',
    'pygame',
    
    # –í–µ–± —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
    'flask',
    'django',
    'tornado',
    'fastapi',
    
    # –ë–∞–∑–∏ –¥–∞–Ω–∏—Ö
    'sqlite3',
    'mysql',
    'postgresql',
    'pymongo',
    
    # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—è (—è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
    'cryptography',
    'hashlib',
    'hmac',
    
    # –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è
    'distutils',
    'setuptools',
    'pip',
    'wheel',
]

# –ê–Ω–∞–ª—ñ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É
a = Analysis(
    ['main.py'],
    pathex=[str(project_root), str(project_root / 'src')],
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=excludes,
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
pyz = PYZ(a.pure, a.zipped_data, cipher=None)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='RimWorldModBuilder',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,  # –°—Ç–∏—Å–Ω–µ–Ω–Ω—è UPX –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,  # –ë–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –ø—ñ–∑–Ω—ñ—à–µ
    version_file=None,  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–µ—Ä—Å—ñ—é
)

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–±—ñ—Ä–∫—É
print("üîß –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è PyInstaller –¥–ª—è RimWorld Mod Builder v2.0.1")
print(f"üìÅ –ü—Ä–æ—î–∫—Ç: {project_root}")
print(f"üì¶ –®–∞–±–ª–æ–Ω—ñ–≤: {len(template_files)}")
print(f"üé® CustomTkinter —Ä–µ—Å—É—Ä—Å—ñ–≤: {len(ctk_data)}")
print(f"üñºÔ∏è Pillow —Ä–µ—Å—É—Ä—Å—ñ–≤: {len(pillow_data)}")
print(f"üìö –ü—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤: {len(hiddenimports)}")
print(f"üö´ –í–∏–∫–ª—é—á–µ–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤: {len(excludes)}")
print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–±—ñ—Ä–∫–∏")
