#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è RimWorld Mod Builder v2.0.1
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
"""

import subprocess
import threading
from typing import Dict, List, Optional, Callable
from dataclasses import dataclass, field
from packaging import version
import importlib.util

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
try:
    from utils.simple_logger import get_logger_instance
except ImportError:
    # Fallback logger
    class FallbackLogger:
        def info(self, msg): print(f"INFO: {msg}")
        def warning(self, msg): print(f"WARNING: {msg}")
        def error(self, msg): print(f"ERROR: {msg}")
        def debug(self, msg): print(f"DEBUG: {msg}")
    
    def get_logger_instance():
        class Logger:
            def get_logger(self): return FallbackLogger()
        return Logger()


@dataclass
class DependencyInfo:
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å"""
    name: str
    version_required: str
    version_installed: Optional[str]
    description: str
    install_command: str
    import_name: str
    is_optional: bool = False
    alternatives: Optional[List[str]] = None
    
    def __post_init__(self):
        if self.alternatives is None:
            self.alternatives = []


class DependencyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è RimWorld Mod Builder"""
    
    def __init__(self):
        self.logger = get_logger_instance().get_logger()
        self.dependencies = self._define_dependencies()
        self.installation_callbacks: List[Callable] = []
        self.progress_callback: Optional[Callable] = None
        
    def _define_dependencies(self) -> Dict[str, DependencyInfo]:
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ—î–∫—Ç—É"""
        return {
            # –û—Å–Ω–æ–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            "customtkinter": DependencyInfo(
                name="CustomTkinter",
                version_required=">=5.2.0",
                version_installed=None,
                description="–°—É—á–∞—Å–Ω–∏–π GUI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫",
                install_command="pip install customtkinter>=5.2.0",
                import_name="customtkinter",
                is_optional=False
            ),
            
            "pillow": DependencyInfo(
                name="Pillow",
                version_required=">=10.0.0",
                version_installed=None,
                description="–û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å",
                install_command="pip install Pillow>=10.0.0",
                import_name="PIL",
                is_optional=False
            ),
            
            "lxml": DependencyInfo(
                name="lxml",
                version_required=">=4.9.0",
                version_installed=None,
                description="XML –æ–±—Ä–æ–±–∫–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —î –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)",
                install_command="pip install lxml>=4.9.0",
                import_name="lxml",
                is_optional=True  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—É
            ),
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
            "psd-tools": DependencyInfo(
                name="psd-tools",
                version_required=">=1.9.0",
                version_installed=None,
                description="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ PSD —Ñ–∞–π–ª—ñ–≤",
                install_command="pip install psd-tools>=1.9.0",
                import_name="psd_tools",
                is_optional=True
            ),
            
            "cairosvg": DependencyInfo(
                name="cairosvg",
                version_required=">=2.5.0",
                version_installed=None,
                description="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ SVG —Ñ–∞–π–ª—ñ–≤",
                install_command="pip install cairosvg>=2.5.0",
                import_name="cairosvg",
                is_optional=True
            ),
            
            "imageio": DependencyInfo(
                name="imageio",
                version_required=">=2.25.0",
                version_installed=None,
                description="–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å (HDR, EXR)",
                install_command="pip install imageio>=2.25.0",
                import_name="imageio",
                is_optional=True
            ),
            
            "pillow-heif": DependencyInfo(
                name="pillow-heif",
                version_required=">=0.10.0",
                version_installed=None,
                description="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ HEIF/HEIC —Ñ–æ—Ä–º–∞—Ç—ñ–≤",
                install_command="pip install pillow-heif>=0.10.0",
                import_name="pillow_heif",
                is_optional=True
            ),
            
            "psutil": DependencyInfo(
                name="psutil",
                version_required=">=5.9.0",
                version_installed=None,
                description="–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤",
                install_command="pip install psutil>=5.9.0",
                import_name="psutil",
                is_optional=True
            ),
            
            "packaging": DependencyInfo(
                name="packaging",
                version_required=">=21.0",
                version_installed=None,
                description="–†–æ–±–æ—Ç–∞ –∑ –≤–µ—Ä—Å—ñ—è–º–∏ –ø–∞–∫–µ—Ç—ñ–≤",
                install_command="pip install packaging>=21.0",
                import_name="packaging",
                is_optional=False
            )
        }
    
    def check_all_dependencies(self) -> Dict[str, Dict]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        self.logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        
        results = {
            "installed": [],
            "missing": [],
            "outdated": [],
            "optional_missing": [],
            "errors": []
        }
        
        for dep_key, dep_info in self.dependencies.items():
            try:
                status = self._check_single_dependency(dep_info)
                
                if status["installed"]:
                    if status["version_ok"]:
                        results["installed"].append({
                            "name": dep_info.name,
                            "version": status["version"],
                            "required": dep_info.version_required
                        })
                    else:
                        results["outdated"].append({
                            "name": dep_info.name,
                            "version": status["version"],
                            "required": dep_info.version_required,
                            "install_command": dep_info.install_command
                        })
                else:
                    if dep_info.is_optional:
                        results["optional_missing"].append({
                            "name": dep_info.name,
                            "description": dep_info.description,
                            "install_command": dep_info.install_command
                        })
                    else:
                        results["missing"].append({
                            "name": dep_info.name,
                            "description": dep_info.description,
                            "install_command": dep_info.install_command
                        })
                        
            except Exception as e:
                results["errors"].append({
                    "name": dep_info.name,
                    "error": str(e)
                })
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {dep_info.name}: {e}")
        
        self._log_dependency_summary(results)
        return results
    
    def _check_single_dependency(self, dep_info: DependencyInfo) -> Dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–¥–Ω—ñ—î—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
        try:
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É
            spec = importlib.util.find_spec(dep_info.import_name)
            if spec is None:
                return {"installed": False, "version": None, "version_ok": False}
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó
            module = importlib.import_module(dep_info.import_name)
            installed_version = getattr(module, '__version__', None)
            
            if installed_version is None:
                # –°–ø—Ä–æ–±–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ—Å–æ–±—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó
                try:
                    import pkg_resources
                    installed_version = pkg_resources.get_distribution(dep_info.name.lower()).version
                except:
                    installed_version = "unknown"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó
            version_ok = self._check_version_compatibility(
                installed_version, dep_info.version_required
            )
            
            return {
                "installed": True,
                "version": installed_version,
                "version_ok": version_ok
            }
            
        except ImportError:
            return {"installed": False, "version": None, "version_ok": False}
        except Exception as e:
            self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {dep_info.name}: {e}")
            return {"installed": False, "version": None, "version_ok": False}
    
    def _check_version_compatibility(self, installed: str, required: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –≤–µ—Ä—Å—ñ–π"""
        if installed == "unknown":
            return True  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å —è–∫—â–æ –≤–µ—Ä—Å—ñ—è –Ω–µ–≤—ñ–¥–æ–º–∞
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤–∏–º–æ–≥ –≤–µ—Ä—Å—ñ—ó (>=, ==, >, <, —Ç–æ—â–æ)
            if required.startswith(">="):
                return version.parse(installed) >= version.parse(required[2:])
            elif required.startswith("=="):
                return version.parse(installed) == version.parse(required[2:])
            elif required.startswith(">"):
                return version.parse(installed) > version.parse(required[1:])
            elif required.startswith("<="):
                return version.parse(installed) <= version.parse(required[2:])
            elif required.startswith("<"):
                return version.parse(installed) < version.parse(required[1:])
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ >=
                return version.parse(installed) >= version.parse(required)
        except Exception as e:
            self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–µ—Ä—Å—ñ–π {installed} vs {required}: {e}")
            return True  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    
    def _log_dependency_summary(self, results: Dict):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        total = len(self.dependencies)
        installed = len(results["installed"])
        missing = len(results["missing"])
        outdated = len(results["outdated"])
        optional_missing = len(results["optional_missing"])
        
        self.logger.info(f"üìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:")
        self.logger.info(f"  ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {installed}/{total}")
        self.logger.info(f"  ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ: {missing}")
        self.logger.info(f"  ‚ö†Ô∏è –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ: {outdated}")
        self.logger.info(f"  üîß –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ: {optional_missing}")
        
        if results["errors"]:
            self.logger.warning(f"  üí• –ü–æ–º–∏–ª–∫–∏: {len(results['errors'])}")
    
    def install_missing_dependencies(self, include_optional: bool = False, 
                                   progress_callback: Optional[Callable] = None) -> Dict:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        self.progress_callback = progress_callback
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        status = self.check_all_dependencies()
        
        to_install = []
        to_install.extend(status["missing"])
        to_install.extend(status["outdated"])
        
        if include_optional:
            to_install.extend(status["optional_missing"])
        
        if not to_install:
            self.logger.info("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!")
            return {"success": True, "installed": [], "failed": []}
        
        self.logger.info(f"üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {len(to_install)} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        
        results = {
            "success": True,
            "installed": [],
            "failed": []
        }
        
        for i, dep in enumerate(to_install):
            if self.progress_callback:
                progress = (i / len(to_install)) * 100
                self.progress_callback(progress, f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {dep['name']}...")
            
            success = self._install_single_dependency(dep["install_command"])
            
            if success:
                results["installed"].append(dep["name"])
                self.logger.info(f"‚úÖ {dep['name']} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            else:
                results["failed"].append(dep["name"])
                results["success"] = False
                self.logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ {dep['name']}")
        
        if self.progress_callback:
            self.progress_callback(100, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        return results
    
    def _install_single_dependency(self, install_command: str) -> bool:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–Ω—ñ—î—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
        try:
            self.logger.debug(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {install_command}")
            
            # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            cmd_parts = install_command.split()
            
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
            result = subprocess.run(
                cmd_parts,
                capture_output=True,
                text=True,
                timeout=300  # 5 —Ö–≤–∏–ª–∏–Ω —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                return True
            else:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.logger.error("–¢–∞–π–º–∞—É—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (5 —Ö–≤–∏–ª–∏–Ω)")
            return False
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {e}")
            return False
    
    def get_installation_suggestions(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ø–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—é"""
        status = self.check_all_dependencies()
        suggestions = []
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
        if status["missing"]:
            suggestions.append({
                "type": "critical",
                "title": "–ö—Ä–∏—Ç–∏—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                "description": f"–í—ñ–¥—Å—É—Ç–Ω—ñ {len(status['missing'])} –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π",
                "action": "install_critical",
                "dependencies": status["missing"]
            })
        
        # –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –≤–µ—Ä—Å—ñ—ó
        if status["outdated"]:
            suggestions.append({
                "type": "warning",
                "title": "–ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –≤–µ—Ä—Å—ñ—ó",
                "description": f"{len(status['outdated'])} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è",
                "action": "update_outdated",
                "dependencies": status["outdated"]
            })
        
        # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        if status["optional_missing"]:
            suggestions.append({
                "type": "info",
                "title": "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ",
                "description": f"–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å {len(status['optional_missing'])} –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ",
                "action": "install_optional",
                "dependencies": status["optional_missing"]
            })
        
        return suggestions
    
    def add_installation_callback(self, callback: Callable):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è callback –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è"""
        self.installation_callbacks.append(callback)
    
    def install_async(self, include_optional: bool = False):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        def install_worker():
            try:
                results = self.install_missing_dependencies(include_optional, self.progress_callback)
                for callback in self.installation_callbacks:
                    callback(results)
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
                for callback in self.installation_callbacks:
                    callback({"success": False, "error": str(e)})
        
        thread = threading.Thread(target=install_worker, daemon=True)
        thread.start()
        return thread


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
_dependency_manager = None

def get_dependency_manager() -> DependencyManager:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    global _dependency_manager
    if _dependency_manager is None:
        _dependency_manager = DependencyManager()
    return _dependency_manager


if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    manager = DependencyManager()
    
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    status = manager.check_all_dependencies()
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    for category, items in status.items():
        if items:
            print(f"{category}: {len(items)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
    suggestions = manager.get_installation_suggestions()
    for suggestion in suggestions:
        print(f"- {suggestion['title']}: {suggestion['description']}")
