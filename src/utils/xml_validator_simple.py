#!/usr/bin/env python3
"""
–°–ø—Ä–æ—â–µ–Ω–∏–π XML –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä –¥–ª—è RimWorld Mod Builder
–í–∞–ª—ñ–¥–∞—Ü—ñ—è XML —Ñ–∞–π–ª—ñ–≤ –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ lxml
"""

import xml.etree.ElementTree as ET
import re
from pathlib import Path

class SimpleXMLValidator:
    """–°–ø—Ä–æ—â–µ–Ω–∏–π –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä XML –¥–ª—è RimWorld –º–æ–¥—ñ–≤"""
    
    def __init__(self):
        self.rimworld_tags = self.load_rimworld_tags()
        self.errors = []
        self.warnings = []
        
    def load_rimworld_tags(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–æ–º–∏—Ö RimWorld —Ç–µ–≥—ñ–≤"""
        return {
            # –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ–≥–∏
            'ModMetaData', 'Defs', 'ThingDef', 'RecipeDef', 'ResearchProjectDef',
            'PawnKindDef', 'TraitDef', 'FactionDef', 'BiomeDef', 'JobDef', 'WorkGiverDef',
            
            # –ú–µ—Ç–∞–¥–∞–Ω—ñ –º–æ–¥–∞
            'name', 'author', 'packageId', 'description', 'supportedVersions',
            'modDependencies', 'incompatibleWith', 'loadAfter', 'loadBefore',
            
            # ThingDef —Ç–µ–≥–∏
            'defName', 'label', 'thingClass', 'category', 'tickerType', 'altitudeLayer',
            'passability', 'pathCost', 'useHitPoints', 'selectable', 'drawGUIOverlay',
            'rotatable', 'fillPercent', 'statBases', 'costList', 'graphicData',
            'researchPrerequisites', 'constructionSkillPrerequisite', 'designationCategory',
            'placingDraggableDimensions', 'terrainAffordanceNeeded', 'constructEffect',
            'repairEffect', 'filthLeaving', 'leaveResourcesWhenKilled', 'resourcesFractionWhenDeconstructed',
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            'MaxHitPoints', 'WorkToBuild', 'Flammability', 'Beauty', 'Mass', 'MarketValue',
            'DeteriorationRate', 'SellPriceFactor', 'Comfort', 'Nutrition', 'FoodPoisonChance',
            
            # –ì—Ä–∞—Ñ—ñ–∫–∞
            'texPath', 'graphicClass', 'drawSize', 'color', 'colorTwo', 'drawRotated',
            'allowFlip', 'flipExtraRotation', 'shadowData', 'damageData',
            
            # –†–µ—Ü–µ–ø—Ç–∏
            'jobString', 'workSpeedStat', 'workSkill', 'effectWorking', 'soundWorking',
            'workAmount', 'unfinishedThingDef', 'ingredients', 'products', 'recipeUsers',
            'researchPrerequisite', 'skillRequirements', 'workSkillLearnFactor',
            
            # –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è
            'baseCost', 'techLevel', 'prerequisites', 'researchViewX', 'researchViewY',
            'requiredResearchBuilding', 'requiredResearchFacilities', 'tab',
            
            # –ó–∞–≥–∞–ª—å–Ω—ñ
            'li', 'count', 'filter', 'thingDefs', 'categories', 'stuffCategories'
        }
        
    def validate_xml_syntax(self, content):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É XML"""
        self.errors = []
        self.warnings = []
        
        try:
            ET.fromstring(content)
            return True
        except ET.ParseError as e:
            self.errors.append(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ XML: {e}")
            return False
            
    def validate_rimworld_structure(self, content):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ RimWorld –º–æ–¥–∞"""
        try:
            root = ET.fromstring(content)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
            if root.tag == 'ModMetaData':
                self.validate_mod_metadata(root)
            elif root.tag == 'Defs':
                self.validate_defs_structure(root)
            else:
                self.warnings.append(f"–ù–µ–∑–≤–∏—á–Ω–∏–π –∫–æ—Ä–µ–Ω–µ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç: {root.tag}")
                
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö —Ç–µ–≥—ñ–≤
            self.check_unknown_tags(root)
            
        except ET.ParseError:
            # –°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ
            pass
            
    def validate_mod_metadata(self, root):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –º–æ–¥–∞ (About.xml)"""
        required_tags = ['name', 'author', 'packageId', 'supportedVersions']
        
        for tag in required_tags:
            if root.find(tag) is None:
                self.errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —Ç–µ–≥: <{tag}>")
                
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ packageId
        package_id_elem = root.find('packageId')
        if package_id_elem is not None:
            package_id = package_id_elem.text
            if not self.validate_package_id(package_id):
                self.errors.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç packageId: {package_id}")
                
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ supportedVersions
        supported_versions = root.find('supportedVersions')
        if supported_versions is not None:
            if len(supported_versions.findall('li')) == 0:
                self.warnings.append("supportedVersions –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∂–æ–¥–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó")
                
    def validate_package_id(self, package_id):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É packageId"""
        if not package_id:
            return False
            
        # packageId –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ author.modname
        pattern = r'^[a-zA-Z0-9_]+\.[a-zA-Z0-9_]+$'
        return bool(re.match(pattern, package_id))
        
    def validate_defs_structure(self, root):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–µ—Ñ—ñ–Ω—ñ—Ü—ñ–π"""
        def_count = 0
        
        for child in root:
            def_count += 1
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ defName
            def_name_elem = child.find('defName')
            if def_name_elem is None:
                self.errors.append(f"–î–µ—Ñ—ñ–Ω—ñ—Ü—ñ—è {child.tag} –Ω–µ –º–∞—î defName")
            elif not def_name_elem.text:
                self.errors.append(f"–ü–æ—Ä–æ–∂–Ω—ñ–π defName —É –¥–µ—Ñ—ñ–Ω—ñ—Ü—ñ—ó {child.tag}")
                
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ label –¥–ª—è –≤–∏–¥–∏–º–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
            if child.tag in ['ThingDef', 'RecipeDef', 'ResearchProjectDef']:
                label_elem = child.find('label')
                if label_elem is None:
                    self.warnings.append(f"–î–µ—Ñ—ñ–Ω—ñ—Ü—ñ—è {child.tag} –Ω–µ –º–∞—î label")
                    
        if def_count == 0:
            self.warnings.append("–§–∞–π–ª Defs –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∂–æ–¥–Ω–æ—ó –¥–µ—Ñ—ñ–Ω—ñ—Ü—ñ—ó")
            
    def check_unknown_tags(self, element, path=""):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö —Ç–µ–≥—ñ–≤"""
        current_path = f"{path}/{element.tag}" if path else element.tag
        
        if element.tag not in self.rimworld_tags:
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –¥–µ—è–∫—ñ –∑–∞–≥–∞–ª—å–Ω—ñ —Ç–µ–≥–∏
            if element.tag not in ['li', 'count'] and not element.tag.endswith('Def'):
                self.warnings.append(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–≥: {current_path}")
                
        for child in element:
            self.check_unknown_tags(child, current_path)
            
    def validate_file(self, file_path):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è XML —Ñ–∞–π–ª—É"""
        try:
            content = Path(file_path).read_text(encoding='utf-8')
            return self.validate_content(content)
        except Exception as e:
            self.errors = [f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}"]
            return False
            
    def validate_content(self, content):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–º—ñ—Å—Ç—É XML"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
        if not self.validate_xml_syntax(content):
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ RimWorld
        self.validate_rimworld_structure(content)
        
        return len(self.errors) == 0
        
    def get_validation_report(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
        report = {
            'valid': len(self.errors) == 0,
            'errors': self.errors.copy(),
            'warnings': self.warnings.copy(),
            'error_count': len(self.errors),
            'warning_count': len(self.warnings)
        }
        
        return report
        
    def format_report(self, report):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        lines = []
        
        if report['valid']:
            lines.append("‚úÖ XML —Ñ–∞–π–ª –≤–∞–ª—ñ–¥–Ω–∏–π!")
        else:
            lines.append("‚ùå XML —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏!")
            
        if report['errors']:
            lines.append("\nüî¥ –ü–æ–º–∏–ª–∫–∏:")
            for i, error in enumerate(report['errors'], 1):
                lines.append(f"  {i}. {error}")
                
        if report['warnings']:
            lines.append("\nüü° –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:")
            for i, warning in enumerate(report['warnings'], 1):
                lines.append(f"  {i}. {warning}")
                
        if not report['errors'] and not report['warnings']:
            lines.append("\nüéâ –§–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–æ–∫ –∞–±–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å!")
            
        return "\n".join(lines)
        
    def quick_validate(self, content):
        """–®–≤–∏–¥–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ"""
        try:
            ET.fromstring(content)
            return True, "XML —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π"
        except ET.ParseError as e:
            return False, f"XML –ø–æ–º–∏–ª–∫–∞: {str(e)}"
        except Exception as e:
            return False, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
