#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä –¥–ª—è RimWorld Mod Builder v1.0.1 Alpha
–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: batch –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è, drag & drop, zoom/pan, –º–µ—Ç–∞–¥–∞–Ω—ñ, undo/redo
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import filedialog, messagebox
import os
import sys
import json
import threading
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
from datetime import datetime
from PIL import Image, ImageTk
import shutil

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
try:
    from core.image_formats import ImageFormatHandler
    from utils.simple_logger import get_logger_instance
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    # Fallback –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    class MockImageFormatHandler:
        def load_image_as_pil(self, path): return None
        def can_handle_format(self, path): return True
        def get_format_info(self, path): return {"native": True}
        def get_missing_dependencies(self): return []
    
    def get_logger_instance():
        class Logger:
            def get_logger(self): 
                class L:
                    def info(self, m): print(f"INFO: {m}")
                    def error(self, m): print(f"ERROR: {m}")
                    def warning(self, m): print(f"WARNING: {m}")
                    def debug(self, m): print(f"DEBUG: {m}")
                return L()
        return Logger()


@dataclass
class TextureMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω—ñ —Ç–µ–∫—Å—Ç—É—Ä–∏"""
    filename: str
    filepath: str
    format: str
    size: Tuple[int, int]
    file_size: int
    color_mode: str
    has_transparency: bool
    created_date: str
    modified_date: str
    dpi: Optional[Tuple[int, int]] = None
    compression: Optional[str] = None
    
    def to_dict(self) -> Dict:
        return asdict(self)


@dataclass
class TextureOperation:
    """–û–ø–µ—Ä–∞—Ü—ñ—è –∑ —Ç–µ–∫—Å—Ç—É—Ä–æ—é –¥–ª—è undo/redo"""
    operation_type: str  # "import", "delete", "convert", "rename"
    timestamp: str
    files_before: List[str]
    files_after: List[str]
    metadata: Dict[str, Any]


class DragDropFrame(ctk.CTkFrame):
    """–§—Ä–µ–π–º –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é drag & drop"""
    
    def __init__(self, parent, drop_callback=None, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.drop_callback = drop_callback
        self.setup_drag_drop()
    
    def setup_drag_drop(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è drag & drop"""
        try:
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è drag & drop
            self.drop_target_register(tk.DND_FILES)
            self.dnd_bind('<<Drop>>', self.on_drop)
            self.dnd_bind('<<DragEnter>>', self.on_drag_enter)
            self.dnd_bind('<<DragLeave>>', self.on_drag_leave)
        except:
            # Fallback —è–∫—â–æ tkinterdnd2 –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            self.bind("<Button-1>", self.on_click_fallback)
    
    def on_drop(self, event):
        """–û–±—Ä–æ–±–∫–∞ drop –ø–æ–¥—ñ—ó"""
        if self.drop_callback and hasattr(event, 'data'):
            files = event.data.split()
            self.drop_callback(files)
    
    def on_drag_enter(self, event):
        """–û–±—Ä–æ–±–∫–∞ –≤—Ö–æ–¥—É –≤ –∑–æ–Ω—É drop"""
        self.configure(border_color="green", border_width=2)
    
    def on_drag_leave(self, event):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –∑–æ–Ω–∏ drop"""
        self.configure(border_color="gray", border_width=1)
    
    def on_click_fallback(self, event):
        """Fallback –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ drag & drop"""
        if self.drop_callback:
            files = filedialog.askopenfilenames(
                title="–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É",
                filetypes=[
                    ("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "*.png *.jpg *.jpeg *.bmp *.gif *.tiff *.webp *.psd *.svg"),
                    ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
                ]
            )
            if files:
                self.drop_callback(list(files))


class ZoomPanCanvas(ctk.CTkCanvas):
    """Canvas –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é zoom —Ç–∞ pan"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.scale = 1.0
        self.min_scale = 0.1
        self.max_scale = 10.0
        self.image_id = None
        self.original_image = None
        self.current_image = None
        
        self.bind("<MouseWheel>", self.on_zoom)
        self.bind("<Button-1>", self.on_pan_start)
        self.bind("<B1-Motion>", self.on_pan_move)
        self.bind("<ButtonRelease-1>", self.on_pan_end)
        
        self.pan_start_x = 0
        self.pan_start_y = 0
    
    def set_image(self, pil_image: Image.Image):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        self.original_image = pil_image
        self.scale = 1.0
        self.update_image()
    
    def update_image(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not self.original_image:
            return
        
        # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        new_size = (
            int(self.original_image.width * self.scale),
            int(self.original_image.height * self.scale)
        )
        
        if new_size[0] > 0 and new_size[1] > 0:
            self.current_image = self.original_image.resize(new_size, Image.Resampling.LANCZOS)
            self.photo = ImageTk.PhotoImage(self.current_image)
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è canvas
            self.delete("all")
            self.image_id = self.create_image(
                self.winfo_width() // 2,
                self.winfo_height() // 2,
                image=self.photo
            )
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è scroll region
            self.configure(scrollregion=self.bbox("all"))
    
    def on_zoom(self, event):
        """–û–±—Ä–æ–±–∫–∞ zoom"""
        if not self.original_image:
            return
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É zoom
        if event.delta > 0:
            factor = 1.1
        else:
            factor = 0.9
        
        new_scale = self.scale * factor
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É
        if self.min_scale <= new_scale <= self.max_scale:
            self.scale = new_scale
            self.update_image()
    
    def on_pan_start(self, event):
        """–ü–æ—á–∞—Ç–æ–∫ pan"""
        self.pan_start_x = event.x
        self.pan_start_y = event.y
    
    def on_pan_move(self, event):
        """–†—É—Ö pan"""
        if self.image_id:
            dx = event.x - self.pan_start_x
            dy = event.y - self.pan_start_y
            self.move(self.image_id, dx, dy)
            self.pan_start_x = event.x
            self.pan_start_y = event.y
    
    def on_pan_end(self, event):
        """–ö—ñ–Ω–µ—Ü—å pan"""
        pass
    
    def reset_view(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –≤–∏–¥—É"""
        self.scale = 1.0
        self.update_image()
    
    def fit_to_window(self):
        """–ü—ñ–¥–≥–æ–Ω–∫–∞ –ø—ñ–¥ —Ä–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞"""
        if not self.original_image:
            return
        
        canvas_width = self.winfo_width()
        canvas_height = self.winfo_height()
        
        if canvas_width > 1 and canvas_height > 1:
            scale_x = canvas_width / self.original_image.width
            scale_y = canvas_height / self.original_image.height
            self.scale = min(scale_x, scale_y) * 0.9  # 90% –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É
            
            if self.scale < self.min_scale:
                self.scale = self.min_scale
            elif self.scale > self.max_scale:
                self.scale = self.max_scale
            
            self.update_image()


class BatchConversionDialog(ctk.CTkToplevel):
    """–î—ñ–∞–ª–æ–≥ batch –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó"""
    
    def __init__(self, parent, files: List[str], **kwargs):
        super().__init__(parent, **kwargs)
        
        self.files = files
        self.conversion_results = []
        
        self.title("üîÑ Batch –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è")
        self.geometry("600x400")
        self.transient(parent)
        self.grab_set()
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ctk.CTkLabel(
            self,
            text=f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è {len(self.files)} —Ñ–∞–π–ª—ñ–≤",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        header_label.pack(pady=10)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        settings_frame = ctk.CTkFrame(self)
        settings_frame.pack(fill="x", padx=10, pady=5)
        
        # –§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É
        format_label = ctk.CTkLabel(settings_frame, text="–§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É:")
        format_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        
        self.output_format = ctk.CTkOptionMenu(
            settings_frame,
            values=["PNG", "JPEG", "WEBP", "TIFF"],
            width=100
        )
        self.output_format.set("PNG")
        self.output_format.grid(row=0, column=1, padx=5, pady=5)
        
        # –Ø–∫—ñ—Å—Ç—å (–¥–ª—è JPEG/WEBP)
        quality_label = ctk.CTkLabel(settings_frame, text="–Ø–∫—ñ—Å—Ç—å:")
        quality_label.grid(row=0, column=2, padx=5, pady=5, sticky="w")
        
        self.quality_slider = ctk.CTkSlider(
            settings_frame,
            from_=1,
            to=100,
            number_of_steps=99,
            width=150
        )
        self.quality_slider.set(95)
        self.quality_slider.grid(row=0, column=3, padx=5, pady=5)
        
        self.quality_value = ctk.CTkLabel(settings_frame, text="95%")
        self.quality_value.grid(row=0, column=4, padx=5, pady=5)
        
        self.quality_slider.configure(command=self.update_quality_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å
        progress_frame = ctk.CTkFrame(self)
        progress_frame.pack(fill="x", padx=10, pady=5)
        
        self.progress_label = ctk.CTkLabel(progress_frame, text="–ì–æ—Ç–æ–≤–∏–π –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó")
        self.progress_label.pack(pady=5)
        
        self.progress_bar = ctk.CTkProgressBar(progress_frame)
        self.progress_bar.pack(fill="x", padx=10, pady=5)
        self.progress_bar.set(0)
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤
        files_frame = ctk.CTkFrame(self)
        files_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.files_list = ctk.CTkScrollableFrame(files_frame, label_text="–§–∞–π–ª–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó")
        self.files_list.pack(fill="both", expand=True, padx=5, pady=5)
        
        for file_path in self.files:
            file_label = ctk.CTkLabel(
                self.files_list,
                text=os.path.basename(file_path),
                anchor="w"
            )
            file_label.pack(fill="x", padx=5, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(self)
        buttons_frame.pack(fill="x", padx=10, pady=10)
        
        self.convert_button = ctk.CTkButton(
            buttons_frame,
            text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏",
            command=self.start_conversion,
            width=120
        )
        self.convert_button.pack(side="left", padx=5)
        
        self.cancel_button = ctk.CTkButton(
            buttons_frame,
            text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
            command=self.destroy,
            width=120
        )
        self.cancel_button.pack(side="right", padx=5)
    
    def update_quality_label(self, value):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª–∞ —è–∫–æ—Å—Ç—ñ"""
        self.quality_value.configure(text=f"{int(value)}%")
    
    def start_conversion(self):
        """–ü–æ—á–∞—Ç–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó"""
        def conversion_worker():
            try:
                output_format = self.output_format.get().lower()
                quality = int(self.quality_slider.get())
                
                for i, file_path in enumerate(self.files):
                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                    progress = (i / len(self.files)) * 100
                    filename = os.path.basename(file_path)
                    
                    self.after(0, lambda p=progress, f=filename: self.update_progress(p, f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è {f}..."))
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ñ–∞–π–ª—É
                    success = self.convert_file(file_path, output_format, quality)
                    self.conversion_results.append({
                        "file": file_path,
                        "success": success
                    })
                
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                self.after(0, lambda: self.conversion_complete())
                
            except Exception as e:
                self.after(0, lambda: self.conversion_error(str(e)))
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        self.convert_button.configure(state="disabled")
        thread = threading.Thread(target=conversion_worker, daemon=True)
        thread.start()
    
    def convert_file(self, file_path: str, output_format: str, quality: int) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image = Image.open(file_path)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —ñ–º–µ–Ω—ñ
            base_name = os.path.splitext(os.path.basename(file_path))[0]
            output_dir = os.path.dirname(file_path)
            output_path = os.path.join(output_dir, f"{base_name}_converted.{output_format}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
            if output_format in ["jpeg", "jpg"]:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ RGB –¥–ª—è JPEG
                if image.mode in ("RGBA", "LA", "P"):
                    rgb_image = Image.new("RGB", image.size, (255, 255, 255))
                    if image.mode == "P":
                        image = image.convert("RGBA")
                    rgb_image.paste(image, mask=image.split()[-1] if image.mode == "RGBA" else None)
                    image = rgb_image
                
                image.save(output_path, format="JPEG", quality=quality, optimize=True)
            
            elif output_format == "webp":
                image.save(output_path, format="WEBP", quality=quality, optimize=True)
            
            else:
                image.save(output_path, format=output_format.upper())
            
            return True
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó {file_path}: {e}")
            return False
    
    def update_progress(self, progress: float, message: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        self.progress_bar.set(progress / 100.0)
        self.progress_label.configure(text=message)
    
    def conversion_complete(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó"""
        successful = sum(1 for r in self.conversion_results if r["success"])
        total = len(self.conversion_results)
        
        self.progress_bar.set(1.0)
        self.progress_label.configure(text=f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{total} —Ñ–∞–π–ª—ñ–≤")
        
        messagebox.showinfo(
            "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            f"–£—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ {successful} –∑ {total} —Ñ–∞–π–ª—ñ–≤"
        )
        
        self.convert_button.configure(state="normal", text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def conversion_error(self, error_message: str):
        """–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó"""
        self.progress_label.configure(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error_message}")
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó", error_message)
        self.convert_button.configure(state="normal")


class EnhancedTextureManager(ctk.CTkFrame):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä"""
    
    def __init__(self, parent, project_path: Optional[str] = None, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.project_path = project_path
        self.textures_path = os.path.join(project_path, "Textures") if project_path else None
        self.format_handler = ImageFormatHandler() if 'ImageFormatHandler' in globals() else MockImageFormatHandler()
        self.logger = get_logger_instance().get_logger()
        
        # –°—Ç–∞–Ω
        self.current_files = []
        self.selected_file = None
        self.operation_history = []  # –î–ª—è undo/redo
        self.history_index = -1
        
        # –ö–µ—à –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        self.metadata_cache = {}
        
        self.setup_ui()
        self.refresh_files()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(self)
        header_frame.pack(fill="x", padx=5, pady=5)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üé® –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=5)
        
        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        toolbar_frame = ctk.CTkFrame(self)
        toolbar_frame.pack(fill="x", padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        self.refresh_button = ctk.CTkButton(
            toolbar_frame,
            text="üîÑ",
            command=self.refresh_files,
            width=40
        )
        self.refresh_button.pack(side="left", padx=2)
        
        self.import_button = ctk.CTkButton(
            toolbar_frame,
            text="üì• –Ü–º–ø–æ—Ä—Ç",
            command=self.import_files,
            width=80
        )
        self.import_button.pack(side="left", padx=2)
        
        self.batch_convert_button = ctk.CTkButton(
            toolbar_frame,
            text="üîÑ Batch",
            command=self.batch_convert,
            width=80
        )
        self.batch_convert_button.pack(side="left", padx=2)
        
        # Undo/Redo
        self.undo_button = ctk.CTkButton(
            toolbar_frame,
            text="‚Ü∂",
            command=self.undo,
            width=40,
            state="disabled"
        )
        self.undo_button.pack(side="left", padx=2)
        
        self.redo_button = ctk.CTkButton(
            toolbar_frame,
            text="‚Ü∑",
            command=self.redo,
            width=40,
            state="disabled"
        )
        self.redo_button.pack(side="left", padx=2)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_frame = ctk.CTkFrame(self)
        content_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤
        left_frame = ctk.CTkFrame(content_frame)
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))
        
        # Drag & Drop –∑–æ–Ω–∞
        self.drop_zone = DragDropFrame(
            left_frame,
            drop_callback=self.on_files_dropped,
            height=100
        )
        self.drop_zone.pack(fill="x", padx=5, pady=5)
        
        drop_label = ctk.CTkLabel(
            self.drop_zone,
            text="üìÅ –ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Ñ–∞–π–ª–∏ —Å—é–¥–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É",
            font=ctk.CTkFont(size=12)
        )
        drop_label.pack(expand=True)
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤
        self.files_list = ctk.CTkScrollableFrame(left_frame, label_text="üìã –§–∞–π–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä")
        self.files_list.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
        right_frame = ctk.CTkFrame(content_frame)
        right_frame.pack(side="right", fill="both", padx=(5, 0))
        right_frame.configure(width=400)
        
        # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
        preview_label = ctk.CTkLabel(
            right_frame,
            text="üëÅÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        preview_label.pack(pady=5)
        
        # Canvas –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.preview_canvas = ZoomPanCanvas(
            right_frame,
            width=350,
            height=300,
            bg="gray20"
        )
        self.preview_canvas.pack(padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥–æ–º
        view_controls = ctk.CTkFrame(right_frame)
        view_controls.pack(fill="x", padx=5, pady=5)
        
        self.reset_view_button = ctk.CTkButton(
            view_controls,
            text="üîÑ –°–∫–∏–Ω—É—Ç–∏",
            command=self.preview_canvas.reset_view,
            width=80
        )
        self.reset_view_button.pack(side="left", padx=2)
        
        self.fit_view_button = ctk.CTkButton(
            view_controls,
            text="üìê –ü—ñ–¥—ñ–≥–Ω–∞—Ç–∏",
            command=self.preview_canvas.fit_to_window,
            width=80
        )
        self.fit_view_button.pack(side="left", padx=2)
        
        # –ú–µ—Ç–∞–¥–∞–Ω—ñ
        self.metadata_frame = ctk.CTkScrollableFrame(
            right_frame,
            label_text="üìä –ú–µ—Ç–∞–¥–∞–Ω—ñ",
            height=200
        )
        self.metadata_frame.pack(fill="both", expand=True, padx=5, pady=5)
    
    def refresh_files(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤"""
        if not self.textures_path or not os.path.exists(self.textures_path):
            return

        # –û—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É
        for widget in self.files_list.winfo_children():
            widget.destroy()

        self.current_files = []

        # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        supported_formats = ['.png', '.jpg', '.jpeg', '.bmp', '.gif', '.tiff', '.webp', '.psd', '.svg']

        for root, _, files in os.walk(self.textures_path):
            for file in files:
                if any(file.lower().endswith(ext) for ext in supported_formats):
                    file_path = os.path.join(root, file)
                    self.current_files.append(file_path)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —Ñ–∞–π–ª—ñ–≤
        for file_path in self.current_files:
            self.create_file_widget(file_path)

        self.logger.info(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(self.current_files)} —Ñ–∞–π–ª—ñ–≤ —Ç–µ–∫—Å—Ç—É—Ä")
    
    def create_file_widget(self, file_path: str):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ —Ñ–∞–π–ª—É"""
        file_frame = ctk.CTkFrame(self.files_list)
        file_frame.pack(fill="x", padx=2, pady=1)

        # –Ü–∫–æ–Ω–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
        ext = os.path.splitext(file_path)[1].lower()
        format_icon = self.get_format_icon(ext)

        icon_label = ctk.CTkLabel(
            file_frame,
            text=format_icon,
            width=30,
            font=ctk.CTkFont(size=12)
        )
        icon_label.pack(side="left", padx=5)

        # –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É
        filename = os.path.basename(file_path)
        name_label = ctk.CTkLabel(
            file_frame,
            text=filename,
            anchor="w",
            font=ctk.CTkFont(size=11)
        )
        name_label.pack(side="left", fill="x", expand=True, padx=5)

        # –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
        try:
            file_size = os.path.getsize(file_path)
            size_text = self.format_file_size(file_size)
            size_label = ctk.CTkLabel(
                file_frame,
                text=size_text,
                width=60,
                font=ctk.CTkFont(size=10),
                text_color="gray"
            )
            size_label.pack(side="right", padx=5)
        except:
            pass

        # –ö–ª—ñ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É
        def on_select():
            self.select_file(file_path)

        file_frame.bind("<Button-1>", lambda _: on_select())
        icon_label.bind("<Button-1>", lambda _: on_select())
        name_label.bind("<Button-1>", lambda _: on_select())

    def get_format_icon(self, ext: str) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É"""
        icons = {
            '.png': 'üñºÔ∏è',
            '.jpg': 'üì∑',
            '.jpeg': 'üì∑',
            '.bmp': 'üé®',
            '.gif': 'üé¨',
            '.tiff': 'üìÑ',
            '.webp': 'üåê',
            '.psd': 'üé≠',
            '.svg': 'üìê'
        }
        return icons.get(ext, 'üìÅ')

    def format_file_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É"""
        if size_bytes < 1024:
            return f"{size_bytes}B"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes / 1024:.1f}KB"
        else:
            return f"{size_bytes / (1024 * 1024):.1f}MB"

    def select_file(self, file_path: str):
        """–í–∏–±—ñ—Ä —Ñ–∞–π–ª—É"""
        self.selected_file = file_path
        self.load_preview(file_path)
        self.load_metadata(file_path)
        self.logger.debug(f"–í–∏–±—Ä–∞–Ω–æ —Ñ–∞–π–ª: {os.path.basename(file_path)}")

    def load_preview(self, file_path: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É"""
        try:
            image = self.format_handler.load_image_as_pil(file_path)
            if image:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ RGB —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if image.mode in ('RGBA', 'LA', 'P'):
                    rgb_image = Image.new('RGB', image.size, (255, 255, 255))
                    if image.mode == 'P':
                        image = image.convert('RGBA')
                    if image.mode in ('RGBA', 'LA'):
                        rgb_image.paste(image, mask=image.split()[-1] if len(image.split()) > 3 else None)
                        image = rgb_image

                self.preview_canvas.set_image(image)
                self.preview_canvas.fit_to_window()
            else:
                self.preview_canvas.delete("all")
                self.preview_canvas.create_text(
                    175, 150,
                    text="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏",
                    fill="red",
                    font=("Arial", 12)
                )
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É: {e}")
            self.preview_canvas.delete("all")
            self.preview_canvas.create_text(
                175, 150,
                text=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
                fill="red",
                font=("Arial", 10)
            )

    def load_metadata(self, file_path: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö"""
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        for widget in self.metadata_frame.winfo_children():
            widget.destroy()

        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
            metadata = self.get_file_metadata(file_path)

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
            for key, value in metadata.to_dict().items():
                if value is not None:
                    self.create_metadata_row(key, value)

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö: {e}")
            error_label = ctk.CTkLabel(
                self.metadata_frame,
                text=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
                text_color="red"
            )
            error_label.pack(pady=5)

    def get_file_metadata(self, file_path: str) -> TextureMetadata:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö —Ñ–∞–π–ª—É"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
        if file_path in self.metadata_cache:
            return self.metadata_cache[file_path]

        # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª
        stat = os.stat(file_path)
        filename = os.path.basename(file_path)
        file_format = os.path.splitext(filename)[1][1:].upper()

        # –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
        try:
            image = self.format_handler.load_image_as_pil(file_path)
            if image:
                size = image.size
                color_mode = image.mode
                has_transparency = image.mode in ('RGBA', 'LA') or 'transparency' in image.info
                dpi = image.info.get('dpi')
            else:
                size = (0, 0)
                color_mode = "Unknown"
                has_transparency = False
                dpi = None
        except:
            size = (0, 0)
            color_mode = "Unknown"
            has_transparency = False
            dpi = None

        metadata = TextureMetadata(
            filename=filename,
            filepath=file_path,
            format=file_format,
            size=size,
            file_size=stat.st_size,
            color_mode=color_mode,
            has_transparency=has_transparency,
            created_date=datetime.fromtimestamp(stat.st_ctime).strftime("%Y-%m-%d %H:%M:%S"),
            modified_date=datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S"),
            dpi=dpi
        )

        # –ö–µ—à—É–≤–∞–Ω–Ω—è
        self.metadata_cache[file_path] = metadata
        return metadata

    def create_metadata_row(self, key: str, value: Any):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö"""
        row_frame = ctk.CTkFrame(self.metadata_frame)
        row_frame.pack(fill="x", padx=2, pady=1)

        # –ù–∞–∑–≤–∞ –ø–æ–ª—è
        key_label = ctk.CTkLabel(
            row_frame,
            text=f"{self.translate_metadata_key(key)}:",
            width=100,
            anchor="w",
            font=ctk.CTkFont(size=10, weight="bold")
        )
        key_label.pack(side="left", padx=5)

        # –ó–Ω–∞—á–µ–Ω–Ω—è
        value_text = str(value)
        if key == "size" and isinstance(value, tuple):
            value_text = f"{value[0]} √ó {value[1]}"
        elif key == "file_size":
            value_text = self.format_file_size(value)

        value_label = ctk.CTkLabel(
            row_frame,
            text=value_text,
            anchor="w",
            font=ctk.CTkFont(size=10)
        )
        value_label.pack(side="left", fill="x", expand=True, padx=5)

    def translate_metadata_key(self, key: str) -> str:
        """–ü–µ—Ä–µ–∫–ª–∞–¥ –∫–ª—é—á—ñ–≤ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö"""
        translations = {
            "filename": "–§–∞–π–ª",
            "format": "–§–æ—Ä–º–∞—Ç",
            "size": "–†–æ–∑–º—ñ—Ä",
            "file_size": "–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É",
            "color_mode": "–ö–æ–ª—ñ—Ä–Ω–∏–π —Ä–µ–∂–∏–º",
            "has_transparency": "–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å",
            "created_date": "–°—Ç–≤–æ—Ä–µ–Ω–æ",
            "modified_date": "–ó–º—ñ–Ω–µ–Ω–æ",
            "dpi": "DPI"
        }
        return translations.get(key, key.title())

    def import_files(self):
        """–Ü–º–ø–æ—Ä—Ç —Ñ–∞–π–ª—ñ–≤"""
        files = filedialog.askopenfilenames(
            title="–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É",
            filetypes=[
                ("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "*.png *.jpg *.jpeg *.bmp *.gif *.tiff *.webp *.psd *.svg"),
                ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
            ]
        )
        if files:
            self.on_files_dropped(list(files))

    def batch_convert(self):
        """Batch –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è"""
        if not self.current_files:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó")
            return

        _ = BatchConversionDialog(self, self.current_files)

    def on_files_dropped(self, files: List[str]):
        """–û–±—Ä–æ–±–∫–∞ dropped —Ñ–∞–π–ª—ñ–≤"""
        if not self.textures_path:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü—Ä–æ—î–∫—Ç –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ")
            return

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ Textures —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs(self.textures_path, exist_ok=True)

        imported_files = []
        errors = []

        for file_path in files:
            try:
                if os.path.exists(file_path):
                    filename = os.path.basename(file_path)
                    dest_path = os.path.join(self.textures_path, filename)

                    # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
                    shutil.copy2(file_path, dest_path)
                    imported_files.append(filename)

            except Exception as e:
                errors.append(f"{os.path.basename(file_path)}: {str(e)}")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if imported_files:
            self.add_operation_to_history("import", [], imported_files)
            self.refresh_files()
            messagebox.showinfo(
                "–Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(imported_files)} —Ñ–∞–π–ª—ñ–≤"
            )

        if errors:
            messagebox.showerror(
                "–ü–æ–º–∏–ª–∫–∏ —ñ–º–ø–æ—Ä—Ç—É",
                f"–ü–æ–º–∏–ª–∫–∏:\n" + "\n".join(errors[:5])  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ 5 –ø–æ–º–∏–ª–æ–∫
            )

    def add_operation_to_history(self, operation_type: str, files_before: List[str], files_after: List[str]):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó"""
        operation = TextureOperation(
            operation_type=operation_type,
            timestamp=datetime.now().isoformat(),
            files_before=files_before,
            files_after=files_after,
            metadata={}
        )

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –ø—ñ—Å–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        self.operation_history = self.operation_history[:self.history_index + 1]

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
        self.operation_history.append(operation)
        self.history_index = len(self.operation_history) - 1

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        self.update_undo_redo_buttons()

    def update_undo_redo_buttons(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫ undo/redo"""
        can_undo = self.history_index >= 0
        can_redo = self.history_index < len(self.operation_history) - 1

        self.undo_button.configure(state="normal" if can_undo else "disabled")
        self.redo_button.configure(state="normal" if can_redo else "disabled")

    def undo(self):
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        if self.history_index >= 0:
            operation = self.operation_history[self.history_index]
            self.reverse_operation(operation)
            self.history_index -= 1
            self.update_undo_redo_buttons()
            self.refresh_files()

    def redo(self):
        """–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        if self.history_index < len(self.operation_history) - 1:
            self.history_index += 1
            operation = self.operation_history[self.history_index]
            self.apply_operation(operation)
            self.update_undo_redo_buttons()
            self.refresh_files()

    def reverse_operation(self, operation: TextureOperation):
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        if operation.operation_type == "import" and self.textures_path:
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
            for filename in operation.files_after:
                file_path = os.path.join(self.textures_path, filename)
                if os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                    except Exception as e:
                        self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {filename}: {e}")

    def apply_operation(self, operation: TextureOperation):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        # –î–ª—è redo –æ–ø–µ—Ä–∞—Ü—ñ–π —ñ–º–ø–æ—Ä—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–ª–æ –± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏
        # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
        _ = operation  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è unused parameter


if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    
    root = ctk.CTk()
    root.title("–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä")
    root.geometry("1200x800")
    
    manager = EnhancedTextureManager(root, project_path="./test_project")
    manager.pack(fill="both", expand=True, padx=10, pady=10)
    
    root.mainloop()
