#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î—ñ–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è RimWorld Mod Builder v2.0.1
CustomTkinter —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è DependencyManager
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox
import threading
from typing import Dict, List, Optional, Callable

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
try:
    from core.dependency_manager import get_dependency_manager
    from utils.simple_logger import get_logger_instance
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    # Fallback –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    class MockDependencyManager:
        def check_all_dependencies(self):
            return {"installed": [], "missing": [], "outdated": [], "optional_missing": [], "errors": []}
        def get_installation_suggestions(self):
            return []
        def install_missing_dependencies(self, include_optional=False, progress_callback=None):
            return {"success": True, "installed": [], "failed": []}
    
    def get_dependency_manager():
        return MockDependencyManager()
    
    def get_logger_instance():
        class Logger:
            def get_logger(self): 
                class L:
                    def info(self, m): print(f"INFO: {m}")
                    def error(self, m): print(f"ERROR: {m}")
                    def warning(self, m): print(f"WARNING: {m}")
                return L()
        return Logger()


class DependencyStatusWidget(ctk.CTkFrame):
    """–í—ñ–¥–∂–µ—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
    
    def __init__(self, parent, dependency_info: Dict, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.dependency_info = dependency_info
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≤—ñ–¥–∂–µ—Ç–∞"""
        # –Ü–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å—É
        status_color = self._get_status_color()
        status_text = self._get_status_text()
        
        self.status_label = ctk.CTkLabel(
            self, 
            text=status_text,
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=status_color,
            width=30
        )
        self.status_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        
        # –ù–∞–∑–≤–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
        self.name_label = ctk.CTkLabel(
            self,
            text=self.dependency_info.get("name", "–ù–µ–≤—ñ–¥–æ–º–∞"),
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.name_label.grid(row=0, column=1, padx=5, pady=5, sticky="w")
        
        # –í–µ—Ä—Å—ñ—è
        version_text = self._get_version_text()
        self.version_label = ctk.CTkLabel(
            self,
            text=version_text,
            font=ctk.CTkFont(size=12)
        )
        self.version_label.grid(row=0, column=2, padx=5, pady=5, sticky="w")
        
        # –û–ø–∏—Å
        description = self.dependency_info.get("description", "")
        if description:
            self.desc_label = ctk.CTkLabel(
                self,
                text=description,
                font=ctk.CTkFont(size=11),
                text_color="gray"
            )
            self.desc_label.grid(row=1, column=1, columnspan=2, padx=5, pady=(0, 5), sticky="w")
        
        # –ö–Ω–æ–ø–∫–∞ –¥—ñ—ó (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
        if self._needs_action():
            self.action_button = ctk.CTkButton(
                self,
                text=self._get_action_text(),
                command=self._perform_action,
                width=100,
                height=25
            )
            self.action_button.grid(row=0, column=3, padx=5, pady=5, sticky="e")
    
    def _get_status_color(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Å—Ç–∞—Ç—É—Å—É"""
        if "version" in self.dependency_info:
            if self.dependency_info.get("version_ok", True):
                return "green"
            else:
                return "orange"
        else:
            return "red"
    
    def _get_status_text(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Å—Ç–∞—Ç—É—Å—É"""
        if "version" in self.dependency_info:
            if self.dependency_info.get("version_ok", True):
                return "‚úÖ"
            else:
                return "‚ö†Ô∏è"
        else:
            return "‚ùå"
    
    def _get_version_text(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤–µ—Ä—Å—ñ—ó"""
        version = self.dependency_info.get("version")
        required = self.dependency_info.get("required")
        
        if version and required:
            return f"v{version} (–ø–æ—Ç—Ä—ñ–±–Ω–æ {required})"
        elif required:
            return f"–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {required})"
        else:
            return "–í–µ—Ä—Å—ñ—è –Ω–µ–≤—ñ–¥–æ–º–∞"
    
    def _needs_action(self) -> bool:
        """–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥—ñ—ó"""
        return "install_command" in self.dependency_info
    
    def _get_action_text(self) -> str:
        """–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥—ñ—ó"""
        if "version" in self.dependency_info:
            return "–û–Ω–æ–≤–∏—Ç–∏"
        else:
            return "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏"
    
    def _perform_action(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó"""
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        messagebox.showinfo("–î—ñ—è", f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {self.dependency_info['name']}...")


class DependencyDialog(ctk.CTkToplevel):
    """–î—ñ–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.dependency_manager = get_dependency_manager()
        self.logger = get_logger_instance().get_logger()
        
        self.title("üîß –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏ - RimWorld Mod Builder")
        self.geometry("800x600")
        self.minsize(600, 400)
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        if parent:
            self.transient(parent)
            self.grab_set()
        
        self.setup_ui()
        self.refresh_dependencies()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.header_frame = ctk.CTkFrame(self)
        self.header_frame.pack(fill="x", padx=10, pady=10)
        
        self.title_label = ctk.CTkLabel(
            self.header_frame,
            text="üîß –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        self.title_label.pack(pady=10)
        
        self.subtitle_label = ctk.CTkLabel(
            self.header_frame,
            text="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫",
            font=ctk.CTkFont(size=14)
        )
        self.subtitle_label.pack(pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        self.actions_frame = ctk.CTkFrame(self)
        self.actions_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        self.refresh_button = ctk.CTkButton(
            self.actions_frame,
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
            command=self.refresh_dependencies,
            width=120
        )
        self.refresh_button.pack(side="left", padx=5, pady=5)
        
        self.install_critical_button = ctk.CTkButton(
            self.actions_frame,
            text="üì¶ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ",
            command=self.install_critical,
            width=180
        )
        self.install_critical_button.pack(side="left", padx=5, pady=5)
        
        self.install_all_button = ctk.CTkButton(
            self.actions_frame,
            text="üéØ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Å–µ",
            command=self.install_all,
            width=140
        )
        self.install_all_button.pack(side="left", padx=5, pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress_frame = ctk.CTkFrame(self)
        self.progress_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        self.progress_label = ctk.CTkLabel(
            self.progress_frame,
            text="–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏",
            font=ctk.CTkFont(size=12)
        )
        self.progress_label.pack(pady=5)
        
        self.progress_bar = ctk.CTkProgressBar(self.progress_frame)
        self.progress_bar.pack(fill="x", padx=10, pady=(0, 10))
        self.progress_bar.set(0)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.content_frame = ctk.CTkFrame(self)
        self.content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –°–∫—Ä–æ–ª—é–≤–∞–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        self.scrollable_frame = ctk.CTkScrollableFrame(
            self.content_frame,
            label_text="üìã –°—Ç–∞—Ç—É—Å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
        )
        self.scrollable_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_frame = ctk.CTkFrame(self)
        self.stats_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        self.stats_label = ctk.CTkLabel(
            self.stats_frame,
            text="üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...",
            font=ctk.CTkFont(size=12)
        )
        self.stats_label.pack(pady=5)
    
    def refresh_dependencies(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        self.progress_label.configure(text="üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        self.progress_bar.set(0.3)
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
        
        def check_worker():
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
                status = self.dependency_manager.check_all_dependencies()
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                self.after(0, lambda: self._update_dependencies_ui(status))
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
                self.after(0, lambda: self._show_error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}"))
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=check_worker, daemon=True)
        thread.start()
    
    def _update_dependencies_ui(self, status: Dict):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            if status["installed"]:
                installed_label = ctk.CTkLabel(
                    self.scrollable_frame,
                    text="‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="green"
                )
                installed_label.pack(anchor="w", padx=5, pady=(10, 5))
                
                for dep in status["installed"]:
                    widget = DependencyStatusWidget(self.scrollable_frame, dep)
                    widget.pack(fill="x", padx=5, pady=2)
            
            # –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            if status["missing"]:
                missing_label = ctk.CTkLabel(
                    self.scrollable_frame,
                    text="‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="red"
                )
                missing_label.pack(anchor="w", padx=5, pady=(10, 5))
                
                for dep in status["missing"]:
                    widget = DependencyStatusWidget(self.scrollable_frame, dep)
                    widget.pack(fill="x", padx=5, pady=2)
            
            # –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            if status["outdated"]:
                outdated_label = ctk.CTkLabel(
                    self.scrollable_frame,
                    text="‚ö†Ô∏è –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="orange"
                )
                outdated_label.pack(anchor="w", padx=5, pady=(10, 5))
                
                for dep in status["outdated"]:
                    widget = DependencyStatusWidget(self.scrollable_frame, dep)
                    widget.pack(fill="x", padx=5, pady=2)
            
            # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            if status["optional_missing"]:
                optional_label = ctk.CTkLabel(
                    self.scrollable_frame,
                    text="üîß –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="blue"
                )
                optional_label.pack(anchor="w", padx=5, pady=(10, 5))
                
                for dep in status["optional_missing"]:
                    widget = DependencyStatusWidget(self.scrollable_frame, dep)
                    widget.pack(fill="x", padx=5, pady=2)
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_stats(status)
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            self.progress_bar.set(1.0)
            self.progress_label.configure(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI: {e}")
            self._show_error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: {e}")
    
    def _update_stats(self, status: Dict):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = sum(len(status[key]) for key in status.keys())
        installed = len(status["installed"])
        missing = len(status["missing"])
        outdated = len(status["outdated"])
        optional = len(status["optional_missing"])
        
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {installed} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, {missing} –≤—ñ–¥—Å—É—Ç–Ω—ñ, {outdated} –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ, {optional} –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ"
        self.stats_label.configure(text=stats_text)
    
    def _show_error(self, message: str):
        """–ü–æ–∫–∞–∑ –ø–æ–º–∏–ª–∫–∏"""
        self.progress_label.configure(text=f"‚ùå {message}")
        self.progress_bar.set(0)
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", message)
    
    def install_critical(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        self._install_dependencies(include_optional=False)
    
    def install_all(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        self._install_dependencies(include_optional=True)
    
    def _install_dependencies(self, include_optional: bool = False):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        def progress_callback(progress: float, message: str):
            self.after(0, lambda: self._update_progress(progress, message))
        
        def install_worker():
            try:
                results = self.dependency_manager.install_missing_dependencies(
                    include_optional=include_optional,
                    progress_callback=progress_callback
                )
                
                self.after(0, lambda: self._installation_complete(results))
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
                self.after(0, lambda: self._show_error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}"))
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        action = "–≤—Å—ñ—Ö" if include_optional else "–æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö"
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ {action} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ?"):
            thread = threading.Thread(target=install_worker, daemon=True)
            thread.start()
    
    def _update_progress(self, progress: float, message: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        self.progress_bar.set(progress / 100.0)
        self.progress_label.configure(text=message)
    
    def _installation_complete(self, results: Dict):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è"""
        if results["success"]:
            installed = len(results["installed"])
            message = f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {installed} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
            self.progress_label.configure(text=message)
            messagebox.showinfo("–£—Å–ø—ñ—Ö", message)
        else:
            failed = len(results["failed"])
            message = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ {failed} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
            self.progress_label.configure(text=message)
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", message)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É
        self.refresh_dependencies()


def show_dependency_dialog(parent=None):
    """–ü–æ–∫–∞–∑ –¥—ñ–∞–ª–æ–≥—É –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    dialog = DependencyDialog(parent)
    return dialog


if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    
    root = ctk.CTk()
    root.withdraw()  # –°—Ö–æ–≤–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
    
    dialog = show_dependency_dialog()
    
    root.mainloop()
