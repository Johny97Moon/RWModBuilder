#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–í—ñ–¥–∂–µ—Ç –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ C# –¥–ª—è RimWorld Mod Builder v2.0.1
UI –¥–ª—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó, —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è C# –ø—Ä–æ—î–∫—Ç—ñ–≤
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import os
import threading
import subprocess
from typing import Optional, List, Tuple
import time

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
try:
    from core.dotnet_integration import get_dotnet_environment, CSharpCompiler
    from utils.simple_logger import get_logger_instance
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    # Fallback –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    class MockDotNetEnvironment:
        def is_available(self): return False
        def get_environment_info(self): return {"is_ready": False}
    
    class MockCSharpCompiler:
        def __init__(self, env): pass
        def compile_project(self, path, config): return False, "Mock compiler"
    
    def get_dotnet_environment(): return MockDotNetEnvironment()
    def get_logger_instance():
        class Logger:
            def get_logger(self): 
                class L:
                    def info(self, m): print(f"INFO: {m}")
                    def error(self, m): print(f"ERROR: {m}")
                    def warning(self, m): print(f"WARNING: {m}")
                return L()
        return Logger()


class CompilationOutputWidget(ctk.CTkFrame):
    """–í—ñ–¥–∂–µ—Ç –≤–∏–≤–æ–¥—É –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(self)
        header_frame.pack(fill="x", padx=5, pady=5)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üìã –í–∏–≤—ñ–¥ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        title_label.pack(side="left", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        buttons_frame = ctk.CTkFrame(header_frame)
        buttons_frame.pack(side="right", padx=10, pady=5)
        
        self.clear_button = ctk.CTkButton(
            buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
            command=self.clear_output,
            width=80
        )
        self.clear_button.pack(side="left", padx=2)
        
        self.copy_button = ctk.CTkButton(
            buttons_frame,
            text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏",
            command=self.copy_output,
            width=80
        )
        self.copy_button.pack(side="left", padx=2)
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
        self.output_text = ctk.CTkTextbox(
            self,
            wrap="word",
            font=ctk.CTkFont(family="Consolas", size=11)
        )
        self.output_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç
        self.add_output("–ì–æ—Ç–æ–≤–∏–π –¥–æ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó...\n", "info")
    
    def add_output(self, text: str, level: str = "info"):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–æ –≤–∏–≤–æ–¥—É"""
        timestamp = time.strftime("%H:%M:%S")
        
        # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
        colors = {
            "info": "#FFFFFF",
            "success": "#00FF00", 
            "warning": "#FFAA00",
            "error": "#FF4444",
            "debug": "#AAAAAA"
        }
        
        color = colors.get(level, "#FFFFFF")
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        self.output_text.insert("end", f"[{timestamp}] {text}")
        self.output_text.see("end")
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        self.output_text.update()
    
    def clear_output(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤–∏–≤–æ–¥—É"""
        self.output_text.delete("1.0", "end")
        self.add_output("–í–∏–≤—ñ–¥ –æ—á–∏—â–µ–Ω–æ.\n", "info")
    
    def copy_output(self):
        """–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É"""
        try:
            content = self.output_text.get("1.0", "end-1c")
            self.clipboard_clear()
            self.clipboard_append(content)
            self.add_output("–í–∏–≤—ñ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É.\n", "success")
        except Exception as e:
            self.add_output(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {e}\n", "error")


class ProjectSelectorWidget(ctk.CTkFrame):
    """–í—ñ–¥–∂–µ—Ç –≤–∏–±–æ—Ä—É –ø—Ä–æ—î–∫—Ç—É"""
    
    def __init__(self, parent, on_project_selected=None, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.on_project_selected = on_project_selected
        self.current_project = None
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self,
            text="üìÅ –í–∏–±—ñ—Ä –ø—Ä–æ—î–∫—Ç—É",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        title_label.pack(pady=(10, 5))
        
        # –ü–æ–ª–µ —à–ª—è—Ö—É
        path_frame = ctk.CTkFrame(self)
        path_frame.pack(fill="x", padx=10, pady=5)
        
        self.path_entry = ctk.CTkEntry(
            path_frame,
            placeholder_text="–®–ª—è—Ö –¥–æ .csproj —Ñ–∞–π–ª—É..."
        )
        self.path_entry.pack(side="left", fill="x", expand=True, padx=5, pady=5)
        
        browse_button = ctk.CTkButton(
            path_frame,
            text="üìÅ",
            command=self.browse_project,
            width=40
        )
        browse_button.pack(side="right", padx=5, pady=5)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ—î–∫—Ç
        self.info_frame = ctk.CTkFrame(self)
        self.info_frame.pack(fill="x", padx=10, pady=5)
        
        self.info_label = ctk.CTkLabel(
            self.info_frame,
            text="–ü—Ä–æ—î–∫—Ç –Ω–µ –æ–±—Ä–∞–Ω–æ",
            font=ctk.CTkFont(size=12)
        )
        self.info_label.pack(pady=10)
    
    def browse_project(self):
        """–í–∏–±—ñ—Ä –ø—Ä–æ—î–∫—Ç—É"""
        file_path = filedialog.askopenfilename(
            title="–û–±–µ—Ä—ñ—Ç—å .csproj —Ñ–∞–π–ª",
            filetypes=[
                ("C# Project files", "*.csproj"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            self.set_project(file_path)
    
    def set_project(self, project_path: str):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É"""
        if not os.path.exists(project_path):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–§–∞–π–ª –ø—Ä–æ—î–∫—Ç—É –Ω–µ —ñ—Å–Ω—É—î")
            return
        
        self.current_project = project_path
        self.path_entry.delete(0, tk.END)
        self.path_entry.insert(0, project_path)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        project_name = os.path.splitext(os.path.basename(project_path))[0]
        project_dir = os.path.dirname(project_path)
        
        info_text = f"üì¶ –ü—Ä–æ—î–∫—Ç: {project_name}\nüìÅ –ü–∞–ø–∫–∞: {project_dir}"
        self.info_label.configure(text=info_text)
        
        # –í–∏–∫–ª–∏–∫ callback
        if self.on_project_selected:
            self.on_project_selected(project_path)
    
    def get_project_path(self) -> Optional[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É"""
        return self.current_project


class CompilationSettingsWidget(ctk.CTkFrame):
    """–í—ñ–¥–∂–µ—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self,
            text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        title_label.pack(pady=(10, 5))
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config_frame = ctk.CTkFrame(self)
        config_frame.pack(fill="x", padx=10, pady=5)
        
        config_label = ctk.CTkLabel(config_frame, text="–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
        config_label.pack(side="left", padx=5, pady=5)
        
        self.config_var = ctk.StringVar(value="Release")
        self.config_menu = ctk.CTkOptionMenu(
            config_frame,
            variable=self.config_var,
            values=["Debug", "Release"]
        )
        self.config_menu.pack(side="right", padx=5, pady=5)
        
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
        platform_frame = ctk.CTkFrame(self)
        platform_frame.pack(fill="x", padx=10, pady=5)
        
        platform_label = ctk.CTkLabel(platform_frame, text="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:")
        platform_label.pack(side="left", padx=5, pady=5)
        
        self.platform_var = ctk.StringVar(value="AnyCPU")
        self.platform_menu = ctk.CTkOptionMenu(
            platform_frame,
            variable=self.platform_var,
            values=["AnyCPU", "x86", "x64"]
        )
        self.platform_menu.pack(side="right", padx=5, pady=5)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
        options_frame = ctk.CTkFrame(self)
        options_frame.pack(fill="x", padx=10, pady=5)
        
        self.verbose_var = ctk.BooleanVar(value=False)
        verbose_checkbox = ctk.CTkCheckBox(
            options_frame,
            text="–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥",
            variable=self.verbose_var
        )
        verbose_checkbox.pack(side="left", padx=5, pady=5)
        
        self.clean_var = ctk.BooleanVar(value=True)
        clean_checkbox = ctk.CTkCheckBox(
            options_frame,
            text="–û—á–∏—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–¥ –∑–±—ñ—Ä–∫–æ—é",
            variable=self.clean_var
        )
        clean_checkbox.pack(side="left", padx=5, pady=5)
    
    def get_settings(self) -> dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        return {
            "configuration": self.config_var.get(),
            "platform": self.platform_var.get(),
            "verbose": self.verbose_var.get(),
            "clean": self.clean_var.get()
        }


class CSharpCompilerWidget(ctk.CTkFrame):
    """–ì–æ–ª–æ–≤–Ω–∏–π –≤—ñ–¥–∂–µ—Ç –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ C#"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.dotnet_env = get_dotnet_environment()
        self.compiler = CSharpCompiler(self.dotnet_env)
        self.logger = get_logger_instance().get_logger()
        
        self.current_project = None
        self.compilation_thread = None
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(self)
        header_frame.pack(fill="x", padx=10, pady=10)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üî® –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä C#",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=10)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        left_frame = ctk.CTkFrame(main_frame)
        left_frame.pack(side="left", fill="y", padx=(0, 5))
        left_frame.configure(width=350)
        
        # –í–∏–±—ñ—Ä –ø—Ä–æ—î–∫—Ç—É
        self.project_selector = ProjectSelectorWidget(
            left_frame,
            on_project_selected=self.on_project_selected
        )
        self.project_selector.pack(fill="x", padx=5, pady=5)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó
        self.compilation_settings = CompilationSettingsWidget(left_frame)
        self.compilation_settings.pack(fill="x", padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        actions_frame = ctk.CTkFrame(left_frame)
        actions_frame.pack(fill="x", padx=5, pady=10)
        
        self.compile_button = ctk.CTkButton(
            actions_frame,
            text="üî® –ö–æ–º–ø—ñ–ª—é–≤–∞—Ç–∏",
            command=self.compile_project,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.compile_button.pack(fill="x", padx=5, pady=5)
        
        self.clean_button = ctk.CTkButton(
            actions_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
            command=self.clean_project,
            height=30
        )
        self.clean_button.pack(fill="x", padx=5, pady=2)
        
        self.rebuild_button = ctk.CTkButton(
            actions_frame,
            text="üîÑ –ü–µ—Ä–µ–∑—ñ–±—Ä–∞—Ç–∏",
            command=self.rebuild_project,
            height=30
        )
        self.rebuild_button.pack(fill="x", padx=5, pady=2)
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –≤–∏–≤—ñ–¥
        right_frame = ctk.CTkFrame(main_frame)
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
        
        self.output_widget = CompilationOutputWidget(right_frame)
        self.output_widget.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ .NET
        self.check_dotnet_availability()
    
    def check_dotnet_availability(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ .NET"""
        if not self.dotnet_env.is_available():
            self.output_widget.add_output(
                "‚ùå .NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –Ω–µ–º–æ–∂–ª–∏–≤–∞.\n",
                "error"
            )
            self.compile_button.configure(state="disabled")
            self.clean_button.configure(state="disabled")
            self.rebuild_button.configure(state="disabled")
        else:
            self.output_widget.add_output(
                "‚úÖ .NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–±–æ—Ç–∏.\n",
                "success"
            )
    
    def on_project_selected(self, project_path: str):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—î–∫—Ç—É"""
        self.current_project = project_path
        self.output_widget.add_output(
            f"üìÅ –û–±—Ä–∞–Ω–æ –ø—Ä–æ—î–∫—Ç: {os.path.basename(project_path)}\n",
            "info"
        )
    
    def compile_project(self):
        """–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –ø—Ä–æ—î–∫—Ç—É"""
        if not self.current_project:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—î–∫—Ç –¥–ª—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó")
            return
        
        if self.compilation_thread and self.compilation_thread.is_alive():
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è")
            return
        
        settings = self.compilation_settings.get_settings()
        
        # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        self.set_buttons_state(False)
        
        self.output_widget.add_output(
            f"üî® –ü–æ—á–∞—Ç–æ–∫ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –ø—Ä–æ—î–∫—Ç—É: {os.path.basename(self.current_project)}\n",
            "info"
        )
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        self.compilation_thread = threading.Thread(
            target=self._compile_worker,
            args=(self.current_project, settings),
            daemon=True
        )
        self.compilation_thread.start()
    
    def _compile_worker(self, project_path: str, settings: dict):
        """–†–æ–±–æ—á–∏–π –ø–æ—Ç—ñ–∫ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        try:
            # –û—á–∏—â–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if settings["clean"]:
                self.after(0, lambda: self.output_widget.add_output(
                    "üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É...\n", "info"
                ))
                self._clean_project_sync(project_path)
            
            # –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è
            self.after(0, lambda: self.output_widget.add_output(
                f"‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {settings['configuration']}, –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {settings['platform']}\n",
                "info"
            ))
            
            success, message = self.compiler.compile_project(
                project_path,
                settings["configuration"]
            )
            
            if success:
                self.after(0, lambda: self.compilation_success(message))
            else:
                self.after(0, lambda: self.compilation_error(message))
                
        except Exception as e:
            self.after(0, lambda: self.compilation_error(f"–í–∏–Ω—è—Ç–æ–∫: {str(e)}"))
    
    def compilation_success(self, message: str):
        """–£—Å–ø—ñ—à–Ω–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—è"""
        self.output_widget.add_output(f"‚úÖ {message}\n", "success")
        self.output_widget.add_output("üéâ –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!\n", "success")
        self.set_buttons_state(True)
        
        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if self.current_project:
            project_dir = os.path.dirname(self.current_project)
            bin_dir = os.path.join(project_dir, "bin")
            if os.path.exists(bin_dir):
                self.output_widget.add_output(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —É –ø–∞–ø—Ü—ñ: {bin_dir}\n", "info")
    
    def compilation_error(self, error: str):
        """–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        self.output_widget.add_output(f"‚ùå {error}\n", "error")
        self.output_widget.add_output("üí• –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!\n", "error")
        self.set_buttons_state(True)
    
    def clean_project(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"""
        if not self.current_project:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—î–∫—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è")
            return
        
        self.output_widget.add_output("üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É...\n", "info")
        
        try:
            self._clean_project_sync(self.current_project)
            self.output_widget.add_output("‚úÖ –ü—Ä–æ—î–∫—Ç –æ—á–∏—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n", "success")
        except Exception as e:
            self.output_widget.add_output(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}\n", "error")
    
    def _clean_project_sync(self, project_path: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"""
        project_dir = os.path.dirname(project_path)
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–ø–æ–∫ bin —Ç–∞ obj
        for folder in ["bin", "obj"]:
            folder_path = os.path.join(project_dir, folder)
            if os.path.exists(folder_path):
                import shutil
                shutil.rmtree(folder_path)
    
    def rebuild_project(self):
        """–ü–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –ø—Ä–æ—î–∫—Ç—É"""
        if not self.current_project:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—î–∫—Ç –¥–ª—è –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏")
            return
        
        self.output_widget.add_output("üîÑ –ü–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –ø—Ä–æ—î–∫—Ç—É...\n", "info")
        
        # –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–µ–Ω–Ω—è, –ø–æ—Ç—ñ–º –∫–æ–º–ø—ñ–ª—è—Ü—ñ—è
        try:
            self._clean_project_sync(self.current_project)
            self.compile_project()
        except Exception as e:
            self.output_widget.add_output(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏: {e}\n", "error")
    
    def set_buttons_state(self, enabled: bool):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫"""
        state = "normal" if enabled else "disabled"
        self.compile_button.configure(state=state)
        self.clean_button.configure(state=state)
        self.rebuild_button.configure(state=state)


if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    
    root = ctk.CTk()
    root.title("üî® –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä C# - –¢–µ—Å—Ç")
    root.geometry("1200x800")
    
    compiler_widget = CSharpCompilerWidget(root)
    compiler_widget.pack(fill="both", expand=True, padx=10, pady=10)
    
    root.mainloop()
