#!/usr/bin/env python3
"""
–î—ñ–∞–ª–æ–≥ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–æ–¥–∞ –¥–æ Steam Workshop
"""

import customtkinter as ctk
from tkinter import filedialog, messagebox
from pathlib import Path
import threading

class SteamWorkshopDialog:
    """–î—ñ–∞–ª–æ–≥ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Steam Workshop"""
    
    def __init__(self, parent, project_path):
        self.parent = parent
        self.project_path = project_path
        self.result = None
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
        self.dialog = ctk.CTkToplevel(parent)
        self.dialog.title("Steam Workshop")
        self.dialog.geometry("700x600")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
        self.dialog.geometry(f"+{parent.winfo_x() + 50}+{parent.winfo_y() + 50}")
        
        self.setup_dialog()
        
    def setup_dialog(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self.dialog,
            text="–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ Steam Workshop",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        title_label.pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å
        main_frame = ctk.CTkFrame(self.dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # –í–∫–ª–∞–¥–∫–∏
        self.setup_tabs(main_frame)
        
    def setup_tabs(self, parent):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫"""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
        self.tabview = ctk.CTkTabview(parent)
        self.tabview.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏
        self.setup_prepare_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        self.setup_validation_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        self.setup_guidelines_tab()
        
    def setup_prepare_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–æ–¥–∞"""
        prepare_tab = self.tabview.add("–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞")
        
        # –û–ø–∏—Å
        desc_label = ctk.CTkLabel(
            prepare_tab,
            text="–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ –≤–∞—à –º–æ–¥ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ Steam Workshop",
            font=ctk.CTkFont(size=14)
        )
        desc_label.pack(pady=10)
        
        # –û–ø—Ü—ñ—ó –µ–∫—Å–ø–æ—Ä—Ç—É
        options_frame = ctk.CTkFrame(prepare_tab)
        options_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(
            options_frame,
            text="–û–ø—Ü—ñ—ó –µ–∫—Å–ø–æ—Ä—Ç—É:",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(anchor="w", padx=10, pady=(10, 5))
        
        # –ß–µ–∫–±–æ–∫—Å–∏
        self.create_preview_var = ctk.BooleanVar(value=True)
        preview_check = ctk.CTkCheckBox(
            options_frame,
            text="–°—Ç–≤–æ—Ä–∏—Ç–∏ Preview.png (—è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)",
            variable=self.create_preview_var
        )
        preview_check.pack(anchor="w", padx=20, pady=2)
        
        self.validate_mod_var = ctk.BooleanVar(value=True)
        validate_check = ctk.CTkCheckBox(
            options_frame,
            text="–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –º–æ–¥ –ø–µ—Ä–µ–¥ –µ–∫—Å–ø–æ—Ä—Ç–æ–º",
            variable=self.validate_mod_var
        )
        validate_check.pack(anchor="w", padx=20, pady=2)
        
        self.optimize_images_var = ctk.BooleanVar(value=False)
        optimize_check = ctk.CTkCheckBox(
            options_frame,
            text="–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
            variable=self.optimize_images_var
        )
        optimize_check.pack(anchor="w", padx=20, pady=(2, 10))
        
        # –®–ª—è—Ö –µ–∫—Å–ø–æ—Ä—Ç—É
        path_frame = ctk.CTkFrame(prepare_tab)
        path_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(
            path_frame,
            text="–ü–∞–ø–∫–∞ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É:",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(anchor="w", padx=10, pady=(10, 5))
        
        path_input_frame = ctk.CTkFrame(path_frame, fg_color="transparent")
        path_input_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        self.export_path_entry = ctk.CTkEntry(
            path_input_frame,
            placeholder_text="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É..."
        )
        self.export_path_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        browse_btn = ctk.CTkButton(
            path_input_frame,
            text="–û–≥–ª—è–¥",
            command=self.browse_export_path,
            width=80
        )
        browse_btn.pack(side="right")
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        actions_frame = ctk.CTkFrame(prepare_tab)
        actions_frame.pack(fill="x", padx=10, pady=10)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è Workshop
        workshop_btn = ctk.CTkButton(
            actions_frame,
            text="üöÄ –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–ª—è Workshop",
            command=self.prepare_for_workshop,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        workshop_btn.pack(fill="x", padx=10, pady=10)
        
        # –õ–æ–∫–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        local_btn = ctk.CTkButton(
            actions_frame,
            text="üìÅ –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
            command=self.export_for_local_testing,
            height=35
        )
        local_btn.pack(fill="x", padx=10, pady=(0, 10))
        
        # –ü—Ä–æ–≥—Ä–µ—Å
        self.progress_label = ctk.CTkLabel(prepare_tab, text="")
        self.progress_label.pack(pady=5)
        
    def setup_validation_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
        validation_tab = self.tabview.add("–í–∞–ª—ñ–¥–∞—Ü—ñ—è")
        
        # –û–ø–∏—Å
        desc_label = ctk.CTkLabel(
            validation_tab,
            text="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–∞ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º Steam Workshop",
            font=ctk.CTkFont(size=14)
        )
        desc_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        validate_btn = ctk.CTkButton(
            validation_tab,
            text="üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º–æ–¥",
            command=self.validate_mod,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        validate_btn.pack(pady=10)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        self.validation_results = ctk.CTkTextbox(validation_tab)
        self.validation_results.pack(fill="both", expand=True, padx=10, pady=10)
        
    def setup_guidelines_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
        guidelines_tab = self.tabview.add("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        guidelines_text = """Steam Workshop —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:

üñºÔ∏è Preview –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:
‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 512x512 –ø—ñ–∫—Å–µ–ª—ñ–≤
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 1024x1024 –ø—ñ–∫—Å–µ–ª—ñ–≤
‚Ä¢ –§–æ—Ä–º–∞—Ç: PNG –∞–±–æ JPG
‚Ä¢ –ü–æ–∫–∞–∑—É–π—Ç–µ –∫–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –º–æ–¥–∞

üìù –û–ø–∏—Å –º–æ–¥–∞:
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑—Ä–æ–∑—É–º—ñ–ª—É –º–æ–≤—É
‚Ä¢ –û–ø–∏—à—ñ—Ç—å —â–æ —Ä–æ–±–∏—Ç—å –º–æ–¥
‚Ä¢ –í–∫–∞–∂—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ BBCode –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è

üè∑Ô∏è –¢–µ–≥–∏:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ç–µ–≥—ñ–≤
‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥–∏: Gameplay, Items, Buildings, Quality of Life

üîß –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å:
‚Ä¢ –í–∫–∞–∑—É–π—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó RimWorld
‚Ä¢ –ó–≥–∞–¥—É–π—Ç–µ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ —ñ–Ω—à–∏–º–∏ –º–æ–¥–∞–º–∏
‚Ä¢ –ü–æ–ø–µ—Ä–µ–¥–∂–∞–π—Ç–µ –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏

üìã –û–±–æ–≤'—è–∑–∫–æ–≤—ñ —Ñ–∞–π–ª–∏:
‚Ä¢ About/About.xml –∑ —É—Å—ñ–º–∞ –ø–æ–ª—è–º–∏
‚Ä¢ Preview.png
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π packageId (author.modname)

‚ö†Ô∏è –£–Ω–∏–∫–∞–π—Ç–µ:
‚Ä¢ –ö–æ–ø—ñ—Ä–∞–π—Ç –∫–æ–Ω—Ç–µ–Ω—Ç—É
‚Ä¢ –ù–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
‚Ä¢ –ú–æ–¥—ñ–≤ —â–æ –ª–∞–º–∞—é—Ç—å –≥—Ä—É
‚Ä¢ –î—É–±–ª—é–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –º–æ–¥—ñ–≤"""

        guidelines_textbox = ctk.CTkTextbox(guidelines_tab)
        guidelines_textbox.pack(fill="both", expand=True, padx=10, pady=10)
        guidelines_textbox.insert("1.0", guidelines_text)
        guidelines_textbox.configure(state="disabled")
        
    def browse_export_path(self):
        """–í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É"""
        folder = filedialog.askdirectory(
            title="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É",
            initialdir=str(Path(self.project_path).parent)
        )
        
        if folder:
            self.export_path_entry.delete(0, "end")
            self.export_path_entry.insert(0, folder)
            
    def prepare_for_workshop(self):
        """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–∞ –¥–ª—è Steam Workshop"""
        export_path = self.export_path_entry.get().strip()
        if not export_path:
            export_path = str(Path(self.project_path).parent / f"{Path(self.project_path).name}_Workshop")
            
        self.progress_label.configure(text="–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–∞...")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(
            target=self._prepare_workshop_thread,
            args=(export_path,)
        )
        thread.daemon = True
        thread.start()
        
    def _prepare_workshop_thread(self, export_path):
        """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            from src.core.steam_workshop import SteamWorkshopManager
            
            workshop_manager = SteamWorkshopManager(self.project_path)
            result = workshop_manager.prepare_for_workshop(export_path)
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.dialog.after(0, self._on_workshop_prepared, result)
            
        except Exception as e:
            self.dialog.after(0, self._on_workshop_error, str(e))
            
    def _on_workshop_prepared(self, result):
        """–û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏"""
        if result['success']:
            self.progress_label.configure(text="‚úÖ –ú–æ–¥ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è Workshop!")
            
            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            validation = result.get('validation', {})
            if validation:
                self._show_validation_results(validation)
                
            messagebox.showinfo(
                "–£—Å–ø—ñ—Ö",
                f"–ú–æ–¥ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è Steam Workshop!\n\n–ü–∞–ø–∫–∞: {result['output_path']}"
            )
        else:
            self.progress_label.configure(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –º–æ–¥:\n{result['error']}")
            
    def _on_workshop_error(self, error):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏"""
        self.progress_label.configure(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏")
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–æ–¥–∞:\n{error}")
        
    def export_for_local_testing(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–∞–ø–∫–∏ RimWorld
        try:
            from src.core.steam_workshop import SteamWorkshopManager
            workshop_manager = SteamWorkshopManager(self.project_path)
            rimworld_path = workshop_manager.detect_rimworld_path()
            
            if rimworld_path:
                mods_path = rimworld_path / "Mods"
                if mods_path.exists():
                    result = workshop_manager.export_for_local_testing(mods_path)
                    if result['success']:
                        messagebox.showinfo("–£—Å–ø—ñ—Ö", result['message'])
                    else:
                        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", result['error'])
                    return
                    
        except Exception as e:
            pass
            
        # –†—É—á–Ω–∏–π –≤–∏–±—ñ—Ä –ø–∞–ø–∫–∏
        folder = filedialog.askdirectory(
            title="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É Mods RimWorld",
            initialdir=str(Path.home())
        )
        
        if folder:
            try:
                from src.core.steam_workshop import SteamWorkshopManager
                workshop_manager = SteamWorkshopManager(self.project_path)
                result = workshop_manager.export_for_local_testing(folder)
                
                if result['success']:
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", result['message'])
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", result['error'])
                    
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥:\n{str(e)}")
                
    def validate_mod(self):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –º–æ–¥–∞"""
        try:
            from src.core.steam_workshop import SteamWorkshopManager
            
            workshop_manager = SteamWorkshopManager(self.project_path)
            validation = workshop_manager._validate_for_workshop(self.project_path)
            
            self._show_validation_results(validation)
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –º–æ–¥:\n{str(e)}")
            
    def _show_validation_results(self, validation):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
        self.validation_results.delete("1.0", "end")
        
        if validation['valid']:
            self.validation_results.insert("1.0", "‚úÖ –ú–æ–¥ –≥–æ—Ç–æ–≤–∏–π –¥–ª—è Steam Workshop!\n\n")
        else:
            self.validation_results.insert("1.0", "‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏:\n\n")
            
        if validation['issues']:
            self.validation_results.insert("end", "üö® –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:\n")
            for issue in validation['issues']:
                self.validation_results.insert("end", f"  ‚Ä¢ {issue}\n")
            self.validation_results.insert("end", "\n")
            
        if validation['warnings']:
            self.validation_results.insert("end", "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:\n")
            for warning in validation['warnings']:
                self.validation_results.insert("end", f"  ‚Ä¢ {warning}\n")
            self.validation_results.insert("end", "\n")
            
        if validation['valid'] and not validation['warnings']:
            self.validation_results.insert("end", "–í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")


def show_steam_workshop_dialog(parent, project_path):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –¥—ñ–∞–ª–æ–≥—É Steam Workshop"""
    dialog = SteamWorkshopDialog(parent, project_path)
    parent.wait_window(dialog.dialog)
    return dialog.result
