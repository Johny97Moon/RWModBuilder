#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ RimWorld Mod Builder v1.0.1 Alpha
–û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π Priority 1
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox
import os
from typing import Optional

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
try:
    from ui.dependency_dialog import show_dependency_dialog
    from ui.enhanced_texture_manager import EnhancedTextureManager
    from ui.smart_xml_editor import SmartXMLEditor
    from core.dependency_manager import get_dependency_manager
    from utils.simple_logger import get_logger_instance
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    # Fallback –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    def show_dependency_dialog(parent=None):
        messagebox.showinfo("–ó–∞–≥–ª—É—à–∫–∞", "Dependency Dialog")
        return None
    
    class EnhancedTextureManager(ctk.CTkFrame):
        def __init__(self, parent, project_path=None, **kwargs):
            super().__init__(parent, **kwargs)
            label = ctk.CTkLabel(self, text="Enhanced Texture Manager (–ó–∞–≥–ª—É—à–∫–∞)")
            label.pack(pady=20)
    
    class SmartXMLEditor(ctk.CTkFrame):
        def __init__(self, parent, **kwargs):
            super().__init__(parent, **kwargs)
            label = ctk.CTkLabel(self, text="Smart XML Editor (–ó–∞–≥–ª—É—à–∫–∞)")
            label.pack(pady=20)
    
    def get_dependency_manager():
        class MockManager:
            def check_all_dependencies(self):
                return {"installed": [], "missing": [], "outdated": [], "optional_missing": [], "errors": []}
        return MockManager()
    
    def get_logger_instance():
        class Logger:
            def get_logger(self): 
                class L:
                    def info(self, m): print(f"INFO: {m}")
                    def error(self, m): print(f"ERROR: {m}")
                    def warning(self, m): print(f"WARNING: {m}")
                return L()
        return Logger()


class V2IntegratedInterface(ctk.CTkFrame):
    """–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å v2.0.1"""
    
    def __init__(self, parent, project_path: Optional[str] = None, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.project_path = project_path
        self.logger = get_logger_instance().get_logger()
        self.dependency_manager = get_dependency_manager()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.texture_manager = None
        self.xml_editor = None
        self.dependency_dialog = None
        
        self.setup_ui()
        self.check_dependencies_on_startup()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(self)
        header_frame.pack(fill="x", padx=10, pady=10)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üöÄ RimWorld Mod Builder v2.0.1",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=10)
        
        subtitle_label = ctk.CTkLabel(
            header_frame,
            text="–ü–æ–∫—Ä–∞—â–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥—ñ–≤",
            font=ctk.CTkFont(size=14)
        )
        subtitle_label.pack(pady=(0, 10))
        
        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ v2.0.1
        toolbar_frame = ctk.CTkFrame(self)
        toolbar_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        self.dependency_button = ctk.CTkButton(
            toolbar_frame,
            text="üîß –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
            command=self.show_dependency_manager,
            width=120,
            height=35
        )
        self.dependency_button.pack(side="left", padx=5, pady=5)
        
        self.texture_button = ctk.CTkButton(
            toolbar_frame,
            text="üé® –¢–µ–∫—Å—Ç—É—Ä–∏+",
            command=self.show_enhanced_texture_manager,
            width=120,
            height=35
        )
        self.texture_button.pack(side="left", padx=5, pady=5)
        
        self.xml_button = ctk.CTkButton(
            toolbar_frame,
            text="üìù Smart XML",
            command=self.show_smart_xml_editor,
            width=120,
            height=35
        )
        self.xml_button.pack(side="left", padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        self.status_frame = ctk.CTkFrame(toolbar_frame)
        self.status_frame.pack(side="right", padx=5, pady=5)
        
        self.status_label = ctk.CTkLabel(
            self.status_frame,
            text="üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...",
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(padx=10, pady=5)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.content_frame = ctk.CTkFrame(self)
        self.content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        self.tabview = ctk.CTkTabview(self.content_frame)
        self.tabview.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–û–≥–ª—è–¥"
        self.overview_tab = self.tabview.add("üìã –û–≥–ª—è–¥")
        self.setup_overview_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä"
        self.texture_tab = self.tabview.add("üé® –¢–µ–∫—Å—Ç—É—Ä–∏")
        self.setup_texture_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "Smart XML Editor"
        self.xml_tab = self.tabview.add("üìù XML")
        self.setup_xml_tab()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
        self.tabview.set("üìã –û–≥–ª—è–¥")
    
    def setup_overview_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –æ–≥–ª—è–¥—É"""
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ v2.0.1
        info_frame = ctk.CTkScrollableFrame(self.overview_tab, label_text="üöÄ –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó v2.0.1")
        info_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        features = [
            {
                "title": "üîß –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (psd-tools, cairosvg, imageio)",
                "status": "‚úÖ –ì–æ—Ç–æ–≤–æ"
            },
            {
                "title": "üé® –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä",
                "description": "Batch –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è, drag & drop, zoom/pan, –º–µ—Ç–∞–¥–∞–Ω—ñ, undo/redo",
                "status": "‚úÖ –ì–æ—Ç–æ–≤–æ"
            },
            {
                "title": "üìù Smart XML Editor",
                "description": "–ê–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è RimWorld —Ç–µ–≥—ñ–≤, –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è",
                "status": "‚úÖ –ì–æ—Ç–æ–≤–æ"
            },
            {
                "title": "üîç –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫",
                "description": "–ü–æ—à—É–∫ –ø–æ –≤—Å—å–æ–º—É –ø—Ä–æ—î–∫—Ç—É –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏",
                "status": "üîÑ –í —Ä–æ–∑—Ä–æ–±—Ü—ñ"
            },
            {
                "title": "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –º–æ–¥—ñ–≤",
                "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É, –≥—Ä–∞—Ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π",
                "status": "üîÑ –í —Ä–æ–∑—Ä–æ–±—Ü—ñ"
            },
            {
                "title": "üéÆ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ RimWorld",
                "description": "–®–≤–∏–¥–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Workshop",
                "status": "üîÑ –í —Ä–æ–∑—Ä–æ–±—Ü—ñ"
            }
        ]
        
        for feature in features:
            feature_frame = ctk.CTkFrame(info_frame)
            feature_frame.pack(fill="x", padx=5, pady=5)
            
            title_label = ctk.CTkLabel(
                feature_frame,
                text=feature["title"],
                font=ctk.CTkFont(size=14, weight="bold"),
                anchor="w"
            )
            title_label.pack(fill="x", padx=10, pady=(10, 5))
            
            desc_label = ctk.CTkLabel(
                feature_frame,
                text=feature["description"],
                font=ctk.CTkFont(size=12),
                anchor="w",
                text_color="gray"
            )
            desc_label.pack(fill="x", padx=10, pady=(0, 5))
            
            status_label = ctk.CTkLabel(
                feature_frame,
                text=feature["status"],
                font=ctk.CTkFont(size=11, weight="bold"),
                anchor="e"
            )
            status_label.pack(fill="x", padx=10, pady=(0, 10))
        
        # –®–≤–∏–¥–∫—ñ –¥—ñ—ó
        actions_frame = ctk.CTkFrame(self.overview_tab)
        actions_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        actions_label = ctk.CTkLabel(
            actions_frame,
            text="‚ö° –®–≤–∏–¥–∫—ñ –¥—ñ—ó",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        actions_label.pack(pady=10)
        
        buttons_frame = ctk.CTkFrame(actions_frame)
        buttons_frame.pack(pady=(0, 10))
        
        quick_check_button = ctk.CTkButton(
            buttons_frame,
            text="üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
            command=self.quick_dependency_check,
            width=180
        )
        quick_check_button.pack(side="left", padx=5, pady=5)
        
        quick_install_button = ctk.CTkButton(
            buttons_frame,
            text="üì¶ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Å–µ",
            command=self.quick_install_all,
            width=150
        )
        quick_install_button.pack(side="left", padx=5, pady=5)
        
        help_button = ctk.CTkButton(
            buttons_frame,
            text="‚ùì –î–æ–≤—ñ–¥–∫–∞",
            command=self.show_help,
            width=100
        )
        help_button.pack(side="left", padx=5, pady=5)
    
    def setup_texture_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä"""
        if self.project_path:
            self.texture_manager = EnhancedTextureManager(
                self.texture_tab,
                project_path=self.project_path
            )
            self.texture_manager.pack(fill="both", expand=True)
        else:
            placeholder_label = ctk.CTkLabel(
                self.texture_tab,
                text="üìÅ –í—ñ–¥–∫—Ä–∏–π—Ç–µ –ø—Ä–æ—î–∫—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä",
                font=ctk.CTkFont(size=16)
            )
            placeholder_label.pack(expand=True)
    
    def setup_xml_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ XML"""
        self.xml_editor = SmartXMLEditor(self.xml_tab)
        self.xml_editor.pack(fill="both", expand=True)
    
    def check_dependencies_on_startup(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
        def check_worker():
            try:
                status = self.dependency_manager.check_all_dependencies()
                
                # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                total = sum(len(status[key]) for key in ["installed", "missing", "outdated", "optional_missing"])
                installed = len(status["installed"])
                missing = len(status["missing"])
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                if missing > 0:
                    status_text = f"‚ùå {missing} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –≤—ñ–¥—Å—É—Ç–Ω—ñ"
                    self.after(0, lambda: self.status_label.configure(text=status_text, text_color="red"))
                elif installed == total:
                    status_text = f"‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ ({installed})"
                    self.after(0, lambda: self.status_label.configure(text=status_text, text_color="green"))
                else:
                    status_text = f"‚ö†Ô∏è {installed}/{total} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
                    self.after(0, lambda: self.status_label.configure(text=status_text, text_color="orange"))
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
                self.after(0, lambda: self.status_label.configure(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏", text_color="red"))
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        import threading
        thread = threading.Thread(target=check_worker, daemon=True)
        thread.start()
    
    def show_dependency_manager(self):
        """–ü–æ–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            self.dependency_dialog = show_dependency_dialog(self)
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
    
    def show_enhanced_texture_manager(self):
        """–ü–æ–∫–∞–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä"""
        self.tabview.set("üé® –¢–µ–∫—Å—Ç—É—Ä–∏")
    
    def show_smart_xml_editor(self):
        """–ü–æ–∫–∞–∑ Smart XML Editor"""
        self.tabview.set("üìù XML")
    
    def quick_dependency_check(self):
        """–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        self.check_dependencies_on_startup()
        messagebox.showinfo("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞. –î–∏–≤—ñ—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–∞–≤–æ–º—É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç—ñ.")
    
    def quick_install_all(self):
        """–®–≤–∏–¥–∫–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        if messagebox.askyesno("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è", "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (–≤–∫–ª—é—á–Ω–æ –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º–∏)?"):
            try:
                def install_callback(results):
                    if results.get("success", False):
                        installed = len(results.get("installed", []))
                        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–£—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {installed} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π")
                        self.check_dependencies_on_startup()
                    else:
                        failed = len(results.get("failed", []))
                        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ {failed} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π")
                
                self.dependency_manager.add_installation_callback(install_callback)
                self.dependency_manager.install_async(include_optional=True)
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
    
    def show_help(self):
        """–ü–æ–∫–∞–∑ –¥–æ–≤—ñ–¥–∫–∏"""
        help_text = """
üöÄ RimWorld Mod Builder v2.0.1 - –î–æ–≤—ñ–¥–∫–∞

üîß –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫
- –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ psd-tools, cairosvg, imageio —Ç–∞ —ñ–Ω—à–∏—Ö
- –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

üé® –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä:
- Drag & Drop –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
- Batch –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—ñ–≤
- Zoom/Pan –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
- –ú–µ—Ç–∞–¥–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å
- Undo/Redo –æ–ø–µ—Ä–∞—Ü—ñ—ó

üìù Smart XML Editor:
- –ê–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è RimWorld —Ç–µ–≥—ñ–≤
- –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
- –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É

‚å®Ô∏è –ì–æ—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ:
- Ctrl+Space: –ê–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
- Ctrl+S: –ó–±–µ—Ä–µ–≥—Ç–∏
- F5: –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ XML
- Ctrl+Shift+F: –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ XML

üí° –ü–æ—Ä–∞–¥–∏:
- –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è
- –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –ø—Ä–æ—î–∫—Ç—ñ–≤
        """
        
        messagebox.showinfo("–î–æ–≤—ñ–¥–∫–∞ v2.0.1", help_text)
    
    def set_project_path(self, project_path: str):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É –ø—Ä–æ—î–∫—Ç—É"""
        self.project_path = project_path
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä
        if hasattr(self, 'texture_tab'):
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            for widget in self.texture_tab.winfo_children():
                widget.destroy()
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            self.setup_texture_tab()
        
        self.logger.info(f"–ü—Ä–æ—î–∫—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {project_path}")


def create_v2_interface(parent, project_path: Optional[str] = None) -> V2IntegratedInterface:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É v2.0.1"""
    return V2IntegratedInterface(parent, project_path=project_path)


if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    
    root = ctk.CTk()
    root.title("RimWorld Mod Builder v2.0.1 - –¢–µ—Å—Ç")
    root.geometry("1400x900")
    
    interface = create_v2_interface(root, project_path="./test_project")
    interface.pack(fill="both", expand=True, padx=10, pady=10)
    
    root.mainloop()
