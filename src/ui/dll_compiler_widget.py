#!/usr/bin/env python3
"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó DLL —Ñ–∞–π–ª—ñ–≤
–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ DLL –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ RimWorld Mod Builder
"""

import os
import threading
from pathlib import Path
from typing import Optional, List
import customtkinter as ctk
from tkinter import filedialog, messagebox

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
try:
    import sys
    sys.path.append('.')
    sys.path.append('..')
    from src.core.dll_compiler import DLLCompiler, CompilationSettings, CompilationResult
    from src.core.dotnet_integration import get_dotnet_environment
    from src.utils.simple_logger import get_logger_instance
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    # Fallback –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    from dataclasses import dataclass
    from typing import Optional, List

    @dataclass
    class CompilationSettings:
        configuration: str = "Release"
        platform: str = "AnyCPU"
        target_framework: str = "net472"
        clean_before_build: bool = True
        copy_to_assemblies: bool = True
        include_debug_symbols: bool = False
        optimize_code: bool = True

    @dataclass
    class CompilationResult:
        success: bool
        error_messages: List[str] = None
        def __post_init__(self):
            if self.error_messages is None:
                self.error_messages = []

    class MockDLLCompiler:
        def compile_dll(self, path, settings):
            return CompilationResult(success=False, error_messages=['Mock compiler'])
        def add_compilation_callback(self, callback): pass
        def compile_multiple_projects(self, projects, settings): return []
        def get_compilation_summary(self, results): return {'total_projects': 0, 'successful': 0, 'failed': 0, 'success_rate': 0, 'total_compilation_time': 0, 'total_dll_size': 0}

    class MockDotNetEnvironment:
        def get_environment_info(self): return {'is_ready': False, 'dotnet_path': None, 'msbuild_path': None}

    class MockLogger:
        def get_logger(self): return self
        def info(self, msg): pass
        def error(self, msg): pass

    DLLCompiler = MockDLLCompiler
    get_dotnet_environment = lambda: MockDotNetEnvironment()
    get_logger_instance = lambda: MockLogger()


class CompilationSettingsFrame(ctk.CTkFrame):
    """–§—Ä–µ–π–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
    
    def __init__(self, parent):
        super().__init__(parent)
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self, 
            text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=(10, 15))
        
        # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="x", padx=10, pady=5)
        
        # Configuration
        config_frame = ctk.CTkFrame(main_frame)
        config_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(config_frame, text="–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:").pack(side="left", padx=5)
        self.configuration_var = ctk.StringVar(value="Release")
        self.configuration_combo = ctk.CTkComboBox(
            config_frame,
            values=["Release", "Debug"],
            variable=self.configuration_var,
            width=120
        )
        self.configuration_combo.pack(side="right", padx=5)
        
        # Platform
        platform_frame = ctk.CTkFrame(main_frame)
        platform_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(platform_frame, text="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:").pack(side="left", padx=5)
        self.platform_var = ctk.StringVar(value="AnyCPU")
        self.platform_combo = ctk.CTkComboBox(
            platform_frame,
            values=["AnyCPU", "x86", "x64"],
            variable=self.platform_var,
            width=120
        )
        self.platform_combo.pack(side="right", padx=5)
        
        # Target Framework
        framework_frame = ctk.CTkFrame(main_frame)
        framework_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(framework_frame, text="Target Framework:").pack(side="left", padx=5)
        self.framework_var = ctk.StringVar(value="net472")
        self.framework_combo = ctk.CTkComboBox(
            framework_frame,
            values=["net472", "net48", "net6.0", "net8.0"],
            variable=self.framework_var,
            width=120
        )
        self.framework_combo.pack(side="right", padx=5)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
        options_frame = ctk.CTkFrame(self)
        options_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(
            options_frame, 
            text="üîß –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=5)
        
        # Checkboxes
        self.clean_var = ctk.BooleanVar(value=True)
        self.clean_check = ctk.CTkCheckBox(
            options_frame,
            text="–û—á–∏—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–¥ –∑–±—ñ—Ä–∫–æ—é",
            variable=self.clean_var
        )
        self.clean_check.pack(anchor="w", padx=10, pady=2)
        
        self.copy_assemblies_var = ctk.BooleanVar(value=True)
        self.copy_assemblies_check = ctk.CTkCheckBox(
            options_frame,
            text="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –≤ –ø–∞–ø–∫—É Assemblies",
            variable=self.copy_assemblies_var
        )
        self.copy_assemblies_check.pack(anchor="w", padx=10, pady=2)
        
        self.debug_symbols_var = ctk.BooleanVar(value=False)
        self.debug_symbols_check = ctk.CTkCheckBox(
            options_frame,
            text="–í–∫–ª—é—á–∏—Ç–∏ debug —Å–∏–º–≤–æ–ª–∏",
            variable=self.debug_symbols_var
        )
        self.debug_symbols_check.pack(anchor="w", padx=10, pady=2)
        
        self.optimize_var = ctk.BooleanVar(value=True)
        self.optimize_check = ctk.CTkCheckBox(
            options_frame,
            text="–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–¥",
            variable=self.optimize_var
        )
        self.optimize_check.pack(anchor="w", padx=10, pady=2)
    
    def get_settings(self) -> CompilationSettings:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        return CompilationSettings(
            configuration=self.configuration_var.get(),
            platform=self.platform_var.get(),
            target_framework=self.framework_var.get(),
            clean_before_build=self.clean_var.get(),
            copy_to_assemblies=self.copy_assemblies_var.get(),
            include_debug_symbols=self.debug_symbols_var.get(),
            optimize_code=self.optimize_var.get()
        )


class CompilationOutputFrame(ctk.CTkFrame):
    """–§—Ä–µ–π–º –≤–∏–≤–æ–¥—É –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
    
    def __init__(self, parent):
        super().__init__(parent)
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self, 
            text="üìã –í–∏–≤—ñ–¥ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=(10, 5))
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
        self.output_text = ctk.CTkTextbox(
            self,
            height=200,
            font=ctk.CTkFont(family="Consolas", size=12)
        )
        self.output_text.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        buttons_frame = ctk.CTkFrame(self)
        buttons_frame.pack(fill="x", padx=10, pady=5)
        
        self.clear_button = ctk.CTkButton(
            buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
            command=self.clear_output,
            width=100
        )
        self.clear_button.pack(side="left", padx=5)
        
        self.save_button = ctk.CTkButton(
            buttons_frame,
            text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–≥",
            command=self.save_log,
            width=120
        )
        self.save_button.pack(side="right", padx=5)
    
    def add_output(self, text: str, message_type: str = "info"):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–æ –≤–∏–≤–æ–¥—É"""
        # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        colors = {
            "info": "#FFFFFF",
            "success": "#00FF00", 
            "warning": "#FFAA00",
            "error": "#FF4444"
        }
        
        self.output_text.insert("end", text + "\n")
        self.output_text.see("end")
    
    def clear_output(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤–∏–≤–æ–¥—É"""
        self.output_text.delete("1.0", "end")
    
    def save_log(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É –≤ —Ñ–∞–π–ª"""
        content = self.output_text.get("1.0", "end")
        if not content.strip():
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–≥ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–õ–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {file_path}")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª: {e}")


class DLLCompilerWidget(ctk.CTkFrame):
    """–ì–æ–ª–æ–≤–Ω–∏–π –≤—ñ–¥–∂–µ—Ç –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó DLL"""
    
    def __init__(self, parent):
        super().__init__(parent)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        self.compiler = DLLCompiler()
        self.dotnet_env = get_dotnet_environment()
        self.logger = get_logger_instance().get_logger()
        self.compilation_thread: Optional[threading.Thread] = None
        self.current_projects: List[str] = []
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è callback –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
        self.compiler.add_compilation_callback(self.on_compilation_progress)
        
        self.setup_ui()
        self.check_dotnet_environment()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self, 
            text="üî® –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä DLL –¥–ª—è RimWorld –º–æ–¥—ñ–≤",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        title_label.pack(pady=15)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(self)
        main_container.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - –≤–∏–±—ñ—Ä –ø—Ä–æ—î–∫—Ç—ñ–≤ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        left_panel = ctk.CTkFrame(main_container)
        left_panel.pack(side="left", fill="y", padx=5, pady=5)
        
        # –í–∏–±—ñ—Ä –ø—Ä–æ—î–∫—Ç—ñ–≤
        projects_frame = ctk.CTkFrame(left_panel)
        projects_frame.pack(fill="x", padx=5, pady=5)
        
        ctk.CTkLabel(
            projects_frame, 
            text="üìÅ –ü—Ä–æ—î–∫—Ç–∏ –¥–ª—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=5)
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤
        self.projects_listbox = ctk.CTkTextbox(projects_frame, height=100)
        self.projects_listbox.pack(fill="x", padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç–∞–º–∏
        projects_buttons = ctk.CTkFrame(projects_frame)
        projects_buttons.pack(fill="x", padx=5, pady=5)
        
        self.add_project_button = ctk.CTkButton(
            projects_buttons,
            text="‚ûï –î–æ–¥–∞—Ç–∏",
            command=self.add_project,
            width=80
        )
        self.add_project_button.pack(side="left", padx=2)
        
        self.remove_project_button = ctk.CTkButton(
            projects_buttons,
            text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏",
            command=self.remove_project,
            width=80
        )
        self.remove_project_button.pack(side="left", padx=2)
        
        self.clear_projects_button = ctk.CTkButton(
            projects_buttons,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
            command=self.clear_projects,
            width=80
        )
        self.clear_projects_button.pack(side="left", padx=2)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó
        self.settings_frame = CompilationSettingsFrame(left_panel)
        self.settings_frame.pack(fill="x", padx=5, pady=5)
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –≤–∏–≤—ñ–¥ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        right_panel = ctk.CTkFrame(main_container)
        right_panel.pack(side="right", fill="both", expand=True, padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å .NET
        self.status_frame = ctk.CTkFrame(right_panel)
        self.status_frame.pack(fill="x", padx=5, pady=5)
        
        self.status_label = ctk.CTkLabel(
            self.status_frame,
            text="üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...",
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress_frame = ctk.CTkFrame(right_panel)
        self.progress_frame.pack(fill="x", padx=5, pady=5)
        
        self.progress_label = ctk.CTkLabel(
            self.progress_frame,
            text="–ì–æ—Ç–æ–≤–∏–π –¥–æ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó",
            font=ctk.CTkFont(size=12)
        )
        self.progress_label.pack(pady=2)
        
        self.progress_bar = ctk.CTkProgressBar(self.progress_frame)
        self.progress_bar.pack(fill="x", padx=10, pady=5)
        self.progress_bar.set(0)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó
        compile_buttons = ctk.CTkFrame(right_panel)
        compile_buttons.pack(fill="x", padx=5, pady=5)
        
        self.compile_button = ctk.CTkButton(
            compile_buttons,
            text="üî® –ö–æ–º–ø—ñ–ª—é–≤–∞—Ç–∏",
            command=self.start_compilation,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40
        )
        self.compile_button.pack(side="left", fill="x", expand=True, padx=5)
        
        self.stop_button = ctk.CTkButton(
            compile_buttons,
            text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏",
            command=self.stop_compilation,
            width=100,
            state="disabled"
        )
        self.stop_button.pack(side="right", padx=5)
        
        # –í–∏–≤—ñ–¥ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó
        self.output_frame = CompilationOutputFrame(right_panel)
        self.output_frame.pack(fill="both", expand=True, padx=5, pady=5)
    
    def check_dotnet_environment(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
        env_info = self.dotnet_env.get_environment_info()
        
        if env_info['is_ready']:
            status_text = f"‚úÖ .NET –≥–æ—Ç–æ–≤–∏–π | dotnet: {env_info['dotnet_path'] is not None} | MSBuild: {env_info['msbuild_path'] is not None}"
            self.status_label.configure(text=status_text, text_color="green")
            self.compile_button.configure(state="normal")
        else:
            status_text = "‚ùå .NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å .NET SDK."
            self.status_label.configure(text=status_text, text_color="red")
            self.compile_button.configure(state="disabled")
    
    def add_project(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"""
        file_path = filedialog.askopenfilename(
            title="–û–±–µ—Ä—ñ—Ç—å .csproj —Ñ–∞–π–ª",
            filetypes=[("C# Project files", "*.csproj"), ("All files", "*.*")]
        )
        
        if file_path and file_path not in self.current_projects:
            self.current_projects.append(file_path)
            self.update_projects_display()
    
    def remove_project(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"""
        # –ü—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± - –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ–¥–∞–Ω–∏–π
        if self.current_projects:
            self.current_projects.pop()
            self.update_projects_display()
    
    def clear_projects(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—î–∫—Ç—ñ–≤"""
        self.current_projects.clear()
        self.update_projects_display()
    
    def update_projects_display(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤"""
        self.projects_listbox.delete("1.0", "end")
        
        if not self.current_projects:
            self.projects_listbox.insert("1.0", "–ù–µ–º–∞—î –ø—Ä–æ—î–∫—Ç—ñ–≤ –¥–ª—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó")
        else:
            for i, project in enumerate(self.current_projects, 1):
                project_name = Path(project).name
                self.projects_listbox.insert("end", f"{i}. {project_name}\n")
    
    def on_compilation_progress(self, message: str, progress: float):
        """Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        self.after(0, lambda: self._update_progress(message, progress))
    
    def _update_progress(self, message: str, progress: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤ UI –ø–æ—Ç–æ—Ü—ñ"""
        self.progress_label.configure(text=message)
        self.progress_bar.set(progress / 100.0)
        self.output_frame.add_output(message, "info")
    
    def start_compilation(self):
        """–ü–æ—á–∞—Ç–æ–∫ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        if not self.current_projects:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–î–æ–¥–∞–π—Ç–µ –ø—Ä–æ—î–∫—Ç–∏ –¥–ª—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó")
            return
        
        if self.compilation_thread and self.compilation_thread.is_alive():
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è")
            return
        
        # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        self.compile_button.configure(state="disabled")
        self.stop_button.configure(state="normal")
        
        # –û—á–∏—â–µ–Ω–Ω—è –≤–∏–≤–æ–¥—É
        self.output_frame.clear_output()
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        settings = self.settings_frame.get_settings()
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        self.compilation_thread = threading.Thread(
            target=self._compilation_worker,
            args=(self.current_projects.copy(), settings),
            daemon=True
        )
        self.compilation_thread.start()
    
    def _compilation_worker(self, projects: List[str], settings: CompilationSettings):
        """–†–æ–±–æ—á–∏–π –ø–æ—Ç—ñ–∫ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        try:
            results = self.compiler.compile_multiple_projects(projects, settings)
            
            # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            self.after(0, lambda: self._compilation_finished(results))
            
        except Exception as e:
            self.after(0, lambda: self._compilation_error(str(e)))
    
    def _compilation_finished(self, results: List[CompilationResult]):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        # –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        self.compile_button.configure(state="normal")
        self.stop_button.configure(state="disabled")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = self.compiler.get_compilation_summary(results)
        
        self.output_frame.add_output("\n" + "="*50, "info")
        self.output_frame.add_output("üìä –ó–í–ï–î–ï–ù–ù–Ø –ö–û–ú–ü–Ü–õ–Ø–¶–Ü–á", "info")
        self.output_frame.add_output("="*50, "info")
        self.output_frame.add_output(f"–í—Å—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—ñ–≤: {summary['total_projects']}", "info")
        self.output_frame.add_output(f"–£—Å–ø—ñ—à–Ω–æ: {summary['successful']}", "success")
        self.output_frame.add_output(f"–ü–æ–º–∏–ª–∫–∏: {summary['failed']}", "error" if summary['failed'] > 0 else "info")
        self.output_frame.add_output(f"–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {summary['success_rate']:.1f}%", "info")
        self.output_frame.add_output(f"–ß–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó: {summary['total_compilation_time']:.1f} —Å–µ–∫", "info")
        
        if summary['total_dll_size'] > 0:
            size_mb = summary['total_dll_size'] / (1024 * 1024)
            self.output_frame.add_output(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä DLL: {size_mb:.2f} MB", "info")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if summary['failed'] == 0:
            self.progress_label.configure(text="üéâ –í—Å—ñ –ø—Ä–æ—î–∫—Ç–∏ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–í—Å—ñ {summary['successful']} –ø—Ä–æ—î–∫—Ç—ñ–≤ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            self.progress_label.configure(text=f"‚ö†Ô∏è –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ ({summary['failed']} –ø–æ–º–∏–ª–æ–∫)")
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", f"–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø—ñ—à–Ω–æ: {summary['successful']}\n–ü–æ–º–∏–ª–∫–∏: {summary['failed']}")
    
    def _compilation_error(self, error_message: str):
        """–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        self.compile_button.configure(state="normal")
        self.stop_button.configure(state="disabled")
        
        self.progress_label.configure(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó")
        self.output_frame.add_output(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {error_message}", "error")
        
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó:\n{error_message}")
    
    def stop_compilation(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"""
        # –ü—Ä–∏–º—ñ—Ç–∫–∞: subprocess –Ω–µ –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –∑—É–ø–∏–Ω–∏—Ç–∏, —Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ
        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –±—É–¥–µ –∑—É–ø–∏–Ω–µ–Ω–∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É")
        self.stop_button.configure(state="disabled")


# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞
if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
    root = ctk.CTk()
    root.title("DLL Compiler Widget Test")
    root.geometry("1200x800")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞
    widget = DLLCompilerWidget(root)
    widget.pack(fill="both", expand=True, padx=10, pady=10)
    
    root.mainloop()
