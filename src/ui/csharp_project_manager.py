#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–µ–Ω–µ–¥–∂–µ—Ä C# –ø—Ä–æ—î–∫—Ç—ñ–≤ –¥–ª—è RimWorld Mod Builder v1.0.1 Alpha
UI –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó C# –º–æ–¥—ñ–≤
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import os
import threading
from typing import Optional, Dict, Any

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
try:
    from core.dotnet_integration import get_dotnet_environment, CSharpCompiler, RimWorldModTemplate
    from utils.simple_logger import get_logger_instance
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    # Fallback –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    class MockDotNetEnvironment:
        def is_available(self): return False
        def get_environment_info(self): return {"is_ready": False, "dotnet_path": None}
    
    class MockCSharpCompiler:
        def __init__(self, env): pass
        def create_csharp_project(self, name, path): return path
        def compile_project(self, path, config): return False, "Mock compiler"
    
    class MockRimWorldModTemplate:
        def create_mod_structure(self, name, path, include_cs=True): return path
    
    def get_dotnet_environment(): return MockDotNetEnvironment()
    def get_logger_instance():
        class Logger:
            def get_logger(self): 
                class L:
                    def info(self, m): print(f"INFO: {m}")
                    def error(self, m): print(f"ERROR: {m}")
                    def warning(self, m): print(f"WARNING: {m}")
                return L()
        return Logger()


class DotNetStatusWidget(ctk.CTkFrame):
    """–í—ñ–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å—É .NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.dotnet_env = get_dotnet_environment()
        self.logger = get_logger_instance().get_logger()
        
        self.setup_ui()
        self.update_status()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self,
            text="üîß –°—Ç–∞—Ç—É—Å .NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        title_label.pack(pady=(10, 5))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_frame = ctk.CTkFrame(self)
        self.status_frame.pack(fill="x", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        self.refresh_button = ctk.CTkButton(
            self,
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
            command=self.update_status,
            width=100
        )
        self.refresh_button.pack(pady=5)
    
    def update_status(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É"""
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
        for widget in self.status_frame.winfo_children():
            widget.destroy()
        
        try:
            info = self.dotnet_env.get_environment_info()
            
            # –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
            status_color = "green" if info["is_ready"] else "red"
            status_text = "‚úÖ –ì–æ—Ç–æ–≤–∏–π" if info["is_ready"] else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
            
            status_label = ctk.CTkLabel(
                self.status_frame,
                text=f"–°—Ç–∞—Ç—É—Å: {status_text}",
                text_color=status_color,
                font=ctk.CTkFont(weight="bold")
            )
            status_label.pack(pady=2)
            
            # –î–µ—Ç–∞–ª—ñ
            details = [
                ("dotnet CLI", "‚úÖ" if info["dotnet_available"] else "‚ùå", info["dotnet_path"] or "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
                ("MSBuild", "‚úÖ" if info["msbuild_available"] else "‚ùå", "–î–æ—Å—Ç—É–ø–Ω–∏–π" if info["msbuild_available"] else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
                ("SDK –≤–µ—Ä—Å—ñ—ó", "üì¶", ", ".join(info["sdk_versions"]) if info["sdk_versions"] else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
                ("Framework", "üèóÔ∏è", ", ".join(info["framework_versions"]) if info["framework_versions"] else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            ]
            
            for name, icon, value in details:
                detail_frame = ctk.CTkFrame(self.status_frame)
                detail_frame.pack(fill="x", padx=5, pady=1)
                
                name_label = ctk.CTkLabel(
                    detail_frame,
                    text=f"{icon} {name}:",
                    width=100,
                    anchor="w"
                )
                name_label.pack(side="left", padx=5)
                
                value_label = ctk.CTkLabel(
                    detail_frame,
                    text=value,
                    anchor="w",
                    font=ctk.CTkFont(size=10)
                )
                value_label.pack(side="left", fill="x", expand=True, padx=5)
            
        except Exception as e:
            error_label = ctk.CTkLabel(
                self.status_frame,
                text=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
                text_color="red"
            )
            error_label.pack(pady=5)


class CSharpProjectCreator(ctk.CTkFrame):
    """–°—Ç–≤–æ—Ä—é–≤–∞—á C# –ø—Ä–æ—î–∫—Ç—ñ–≤"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.dotnet_env = get_dotnet_environment()
        self.compiler = CSharpCompiler(self.dotnet_env)
        self.template = RimWorldModTemplate()
        self.logger = get_logger_instance().get_logger()
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self,
            text="üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è C# –ø—Ä–æ—î–∫—Ç—É",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=10)
        
        # –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        form_frame = ctk.CTkFrame(self)
        form_frame.pack(fill="x", padx=10, pady=5)
        
        # –ù–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É
        name_label = ctk.CTkLabel(form_frame, text="–ù–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É:")
        name_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        
        self.name_entry = ctk.CTkEntry(form_frame, placeholder_text="MyRimWorldMod")
        self.name_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        
        # –®–ª—è—Ö –≤–∏–≤–æ–¥—É
        path_label = ctk.CTkLabel(form_frame, text="–ü–∞–ø–∫–∞ –≤–∏–≤–æ–¥—É:")
        path_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
        
        path_frame = ctk.CTkFrame(form_frame)
        path_frame.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        
        self.path_entry = ctk.CTkEntry(path_frame, placeholder_text="–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É...")
        self.path_entry.pack(side="left", fill="x", expand=True, padx=5, pady=5)
        
        browse_button = ctk.CTkButton(
            path_frame,
            text="üìÅ",
            command=self.browse_output_path,
            width=40
        )
        browse_button.pack(side="right", padx=5, pady=5)
        
        # –û–ø—Ü—ñ—ó
        options_frame = ctk.CTkFrame(form_frame)
        options_frame.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="ew")
        
        self.include_csharp_var = ctk.BooleanVar(value=True)
        csharp_checkbox = ctk.CTkCheckBox(
            options_frame,
            text="–í–∫–ª—é—á–∏—Ç–∏ C# –∫–æ–¥",
            variable=self.include_csharp_var
        )
        csharp_checkbox.pack(side="left", padx=5, pady=5)
        
        self.create_full_mod_var = ctk.BooleanVar(value=True)
        full_mod_checkbox = ctk.CTkCheckBox(
            options_frame,
            text="–ü–æ–≤–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–∞",
            variable=self.create_full_mod_var
        )
        full_mod_checkbox.pack(side="left", padx=5, pady=5)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
        form_frame.grid_columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        actions_frame = ctk.CTkFrame(self)
        actions_frame.pack(fill="x", padx=10, pady=10)
        
        self.create_button = ctk.CTkButton(
            actions_frame,
            text="üöÄ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç",
            command=self.create_project,
            width=150
        )
        self.create_button.pack(side="left", padx=5)
        
        self.template_button = ctk.CTkButton(
            actions_frame,
            text="üìã –®–∞–±–ª–æ–Ω–∏",
            command=self.show_templates,
            width=120
        )
        self.template_button.pack(side="left", padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å
        self.progress_frame = ctk.CTkFrame(self)
        self.progress_frame.pack(fill="x", padx=10, pady=5)
        
        self.progress_label = ctk.CTkLabel(
            self.progress_frame,
            text="–ì–æ—Ç–æ–≤–∏–π –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"
        )
        self.progress_label.pack(pady=5)
    
    def browse_output_path(self):
        """–í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –≤–∏–≤–æ–¥—É"""
        path = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ—î–∫—Ç—É")
        if path:
            self.path_entry.delete(0, tk.END)
            self.path_entry.insert(0, path)
    
    def create_project(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"""
        name = self.name_entry.get().strip()
        output_path = self.path_entry.get().strip()
        
        if not name:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ—î–∫—Ç—É")
            return
        
        if not output_path:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –≤–∏–≤–æ–¥—É")
            return
        
        if not os.path.exists(output_path):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–∞–ø–∫–∞ –≤–∏–≤–æ–¥—É –Ω–µ —ñ—Å–Ω—É—î")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if self.include_csharp_var.get() and not self.dotnet_env.is_available():
            if not messagebox.askyesno(
                "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", 
                ".NET —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç –±–µ–∑ C# –∫–æ–¥—É?"
            ):
                return
            self.include_csharp_var.set(False)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        self.create_button.configure(state="disabled")
        self.progress_label.configure(text="üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É...")
        
        def create_worker():
            try:
                if self.create_full_mod_var.get():
                    # –ü–æ–≤–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–∞
                    project_path = self.template.create_mod_structure(
                        name, 
                        output_path, 
                        include_csharp=self.include_csharp_var.get()
                    )
                else:
                    # –¢—ñ–ª—å–∫–∏ C# –ø—Ä–æ—î–∫—Ç
                    project_path = self.compiler.create_csharp_project(name, output_path)
                
                self.after(0, lambda: self.creation_complete(project_path))
                
            except Exception as e:
                self.after(0, lambda: self.creation_error(str(e)))
        
        thread = threading.Thread(target=create_worker, daemon=True)
        thread.start()
    
    def creation_complete(self, project_path: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"""
        self.create_button.configure(state="normal")
        self.progress_label.configure(text="‚úÖ –ü—Ä–æ—î–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        messagebox.showinfo(
            "–£—Å–ø—ñ—Ö", 
            f"–ü—Ä–æ—î–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ:\n{project_path}\n\n–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É?"
        )
        
        # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–ø–∫–∏ –≤ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É
        if messagebox.askyesno("–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É", "–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É –ø—Ä–æ—î–∫—Ç—É?"):
            try:
                os.startfile(project_path)
            except:
                pass
    
    def creation_error(self, error: str):
        """–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"""
        self.create_button.configure(state="normal")
        self.progress_label.configure(text="‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
        
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç:\n{error}")
    
    def show_templates(self):
        """–ü–æ–∫–∞–∑ —à–∞–±–ª–æ–Ω—ñ–≤"""
        templates_window = ctk.CTkToplevel(self)
        templates_window.title("üìã –®–∞–±–ª–æ–Ω–∏ –ø—Ä–æ—î–∫—Ç—ñ–≤")
        templates_window.geometry("600x400")
        templates_window.transient(self)
        
        # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤
        templates = [
            {
                "name": "–ë–∞–∑–æ–≤–∏–π –º–æ–¥",
                "description": "–ü—Ä–æ—Å—Ç–∏–π –º–æ–¥ –∑ –±–∞–∑–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é",
                "includes_cs": False
            },
            {
                "name": "–ú–æ–¥ –∑ C# –∫–æ–¥–æ–º",
                "description": "–ú–æ–¥ –∑ C# –ø—Ä–æ—î–∫—Ç–æ–º —Ç–∞ Harmony –ø–∞—Ç—á–∞–º–∏",
                "includes_cs": True
            },
            {
                "name": "–ú–æ–¥ –∑ –Ω–æ–≤–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
                "description": "–®–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤",
                "includes_cs": False
            },
            {
                "name": "–ú–æ–¥ –∑ –Ω–æ–≤–∏–º–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è–º–∏",
                "description": "–®–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å",
                "includes_cs": False
            }
        ]
        
        templates_frame = ctk.CTkScrollableFrame(templates_window, label_text="–î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏")
        templates_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        for template in templates:
            template_frame = ctk.CTkFrame(templates_frame)
            template_frame.pack(fill="x", padx=5, pady=5)
            
            name_label = ctk.CTkLabel(
                template_frame,
                text=template["name"],
                font=ctk.CTkFont(size=14, weight="bold")
            )
            name_label.pack(anchor="w", padx=10, pady=(10, 5))
            
            desc_label = ctk.CTkLabel(
                template_frame,
                text=template["description"],
                font=ctk.CTkFont(size=12),
                text_color="gray"
            )
            desc_label.pack(anchor="w", padx=10, pady=(0, 5))
            
            use_button = ctk.CTkButton(
                template_frame,
                text="–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏",
                command=lambda t=template: self.use_template(t, templates_window),
                width=100
            )
            use_button.pack(anchor="e", padx=10, pady=(0, 10))
    
    def use_template(self, template: Dict[str, Any], window: ctk.CTkToplevel):
        """–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É"""
        self.include_csharp_var.set(template["includes_cs"])
        self.create_full_mod_var.set(True)
        window.destroy()
        
        messagebox.showinfo("–®–∞–±–ª–æ–Ω", f"–û–±—Ä–∞–Ω–æ —à–∞–±–ª–æ–Ω: {template['name']}")


class CSharpProjectManager(ctk.CTkFrame):
    """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä C# –ø—Ä–æ—î–∫—Ç—ñ–≤"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(self)
        header_frame.pack(fill="x", padx=10, pady=10)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üîß –ú–µ–Ω–µ–¥–∂–µ—Ä C# –ø—Ä–æ—î–∫—Ç—ñ–≤",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        title_label.pack(pady=10)
        
        subtitle_label = ctk.CTkLabel(
            header_frame,
            text="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è C# –º–æ–¥–∞–º–∏ –¥–ª—è RimWorld",
            font=ctk.CTkFont(size=12)
        )
        subtitle_label.pack(pady=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_frame = ctk.CTkFrame(self)
        content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å
        left_frame = ctk.CTkFrame(content_frame)
        left_frame.pack(side="left", fill="y", padx=(0, 5))
        left_frame.configure(width=300)
        
        self.status_widget = DotNetStatusWidget(left_frame)
        self.status_widget.pack(fill="x", padx=5, pady=5)
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤
        right_frame = ctk.CTkFrame(content_frame)
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
        
        self.project_creator = CSharpProjectCreator(right_frame)
        self.project_creator.pack(fill="both", expand=True, padx=5, pady=5)


if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ C# –ø—Ä–æ—î–∫—Ç—ñ–≤
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    
    root = ctk.CTk()
    root.title("üîß –ú–µ–Ω–µ–¥–∂–µ—Ä C# –ø—Ä–æ—î–∫—Ç—ñ–≤ - –¢–µ—Å—Ç")
    root.geometry("1000x700")
    
    manager = CSharpProjectManager(root)
    manager.pack(fill="both", expand=True, padx=10, pady=10)
    
    root.mainloop()
