#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä –¥–ª—è RimWorld Mod Builder
–í–µ—Ä—Å—ñ—è –∑ CustomTkinter - —Å—É—á–∞—Å–Ω–∏–π —Ç–∞ –∫—Ä–∞—Å–∏–≤–∏–π GUI

–ü–µ—Ä–µ–≤–∞–≥–∏ CustomTkinter:
- –õ–µ–≥–∫–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: pip install customtkinter
- –°—É—á–∞—Å–Ω–∏–π –≤–∏–≥–ª—è–¥ –∑ —Ç–µ–º–Ω–∏–º–∏/—Å–≤—ñ—Ç–ª–∏–º–∏ —Ç–µ–º–∞–º–∏
- –ó–Ω–∞–π–æ–º–∞ API (–±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ tkinter)
- –í—ñ–¥–º—ñ–Ω–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
- –ê–∫—Ç–∏–≤–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import filedialog, messagebox
import os
import sys
from typing import Optional
from PIL import Image, ImageTk
import threading
import json
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ core –º–æ–¥—É–ª—ñ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from src.core.image_formats import ImageFormatHandler

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CustomTkinter
ctk.set_appearance_mode("dark")  # "dark" –∞–±–æ "light"
ctk.set_default_color_theme("blue")  # "blue", "green", "dark-blue"

class TextureManagerCustomTkinter:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä –∑ CustomTkinter GUI"""

    def __init__(self, project_path: Optional[str] = None, parent_window=None):
        self.project_path = project_path
        self.textures_path = os.path.join(project_path, "Textures") if project_path else None
        self.format_handler = ImageFormatHandler()
        self.parent_window = parent_window

        # –°—Ç–∞–Ω —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.current_filter = "all"
        self.sort_mode = "name"
        self.zoom_level = 1.0
        self.selected_file = None
        self.file_items = []

        # –ö–µ—à –∑–æ–±—Ä–∞–∂–µ–Ω—å
        self.image_cache = {}
        self.thumbnail_cache = {}

        self.setup_ui()
        
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–µ –≤—ñ–∫–Ω–æ
        if self.parent_window:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–µ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–µ –≤—ñ–∫–Ω–æ
            self.root = self.parent_window
            # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
            self.main_frame = ctk.CTkFrame(self.root)
            self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
            self.root = ctk.CTk()
            self.root.title("üéÆ RimWorld Mod Builder - –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä")
            self.root.geometry("1400x900")
            self.root.minsize(1000, 600)

            # –Ü–∫–æ–Ω–∫–∞ (—è–∫—â–æ —î)
            try:
                self.root.iconbitmap("assets/icon.ico")
            except:
                pass

            # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
            self.main_frame = ctk.CTkFrame(self.root)
            self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        self.setup_header()
        self.setup_toolbar()
        self.setup_content_area()
        self.setup_status_bar()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
        if self.textures_path and os.path.exists(self.textures_path):
            self.refresh_textures()
    
    def setup_header(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = ctk.CTkFrame(self.main_frame)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            header_frame,
            text="üéÆ RimWorld Mod Builder - –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(side="left", padx=20, pady=15)
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ–º–∏
        theme_frame = ctk.CTkFrame(header_frame)
        theme_frame.pack(side="right", padx=20, pady=15)
        
        ctk.CTkLabel(theme_frame, text="–¢–µ–º–∞:").pack(side="left", padx=(10, 5))
        
        self.theme_switch = ctk.CTkSwitch(
            theme_frame,
            text="üåô –¢–µ–º–Ω–∞",
            command=self.toggle_theme
        )
        self.theme_switch.pack(side="left", padx=5)
        self.theme_switch.select()  # –¢–µ–º–Ω–∞ —Ç–µ–º–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
    def setup_toolbar(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"""
        toolbar_frame = ctk.CTkFrame(self.main_frame)
        toolbar_frame.pack(fill="x", padx=10, pady=5)
        
        # –õ—ñ–≤–∞ –≥—Ä—É–ø–∞ - —Ñ–∞–π–ª–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        left_group = ctk.CTkFrame(toolbar_frame)
        left_group.pack(side="left", padx=10, pady=10)
        
        self.import_btn = ctk.CTkButton(
            left_group,
            text="üì• –Ü–º–ø–æ—Ä—Ç",
            command=self.import_texture,
            width=100
        )
        self.import_btn.pack(side="left", padx=5)
        
        self.batch_import_btn = ctk.CTkButton(
            left_group,
            text="üì¶ –ë–∞—Ç—á-—ñ–º–ø–æ—Ä—Ç",
            command=self.batch_import,
            width=120
        )
        self.batch_import_btn.pack(side="left", padx=5)
        
        self.export_btn = ctk.CTkButton(
            left_group,
            text="üì§ –ï–∫—Å–ø–æ—Ä—Ç",
            command=self.export_texture,
            width=100
        )
        self.export_btn.pack(side="left", padx=5)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –≥—Ä—É–ø–∞ - —Ñ—ñ–ª—å—Ç—Ä–∏
        center_group = ctk.CTkFrame(toolbar_frame)
        center_group.pack(expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(center_group, text="–§—ñ–ª—å—Ç—Ä:").pack(side="left", padx=(10, 5))
        
        self.filter_combo = ctk.CTkComboBox(
            center_group,
            values=["–í—Å—ñ —Ñ–∞–π–ª–∏", "PNG", "JPEG", "PSD", "SVG", "–Ü–Ω—à—ñ"],
            command=self.on_filter_changed,
            width=120
        )
        self.filter_combo.pack(side="left", padx=5)
        
        ctk.CTkLabel(center_group, text="–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:").pack(side="left", padx=(15, 5))
        
        self.sort_combo = ctk.CTkComboBox(
            center_group,
            values=["–ó–∞ –Ω–∞–∑–≤–æ—é", "–ó–∞ —Ä–æ–∑–º—ñ—Ä–æ–º", "–ó–∞ –¥–∞—Ç–æ—é", "–ó–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º"],
            command=self.on_sort_changed,
            width=120
        )
        self.sort_combo.pack(side="left", padx=5)
        
        # –ü—Ä–∞–≤–∞ –≥—Ä—É–ø–∞ - –¥—ñ—ó
        right_group = ctk.CTkFrame(toolbar_frame)
        right_group.pack(side="right", padx=10, pady=10)
        
        self.convert_btn = ctk.CTkButton(
            right_group,
            text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏",
            command=self.convert_to_png,
            width=120
        )
        self.convert_btn.pack(side="left", padx=5)
        
        self.optimize_btn = ctk.CTkButton(
            right_group,
            text="‚ö° –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏",
            command=self.optimize_texture,
            width=120
        )
        self.optimize_btn.pack(side="left", padx=5)
        
        self.refresh_btn = ctk.CTkButton(
            right_group,
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
            command=self.refresh_textures,
            width=100
        )
        self.refresh_btn.pack(side="left", padx=5)
    
    def setup_content_area(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        content_frame = ctk.CTkFrame(self.main_frame)
        content_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –ª—ñ–≤—É —Ç–∞ –ø—Ä–∞–≤—É –ø–∞–Ω–µ–ª—ñ
        self.setup_left_panel(content_frame)
        self.setup_right_panel(content_frame)
    
    def setup_left_panel(self, parent):
        """–õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤"""
        left_frame = ctk.CTkFrame(parent)
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª—ñ–≤–æ—ó –ø–∞–Ω–µ–ª—ñ
        left_header = ctk.CTkFrame(left_frame)
        left_header.pack(fill="x", padx=10, pady=(10, 5))
        
        ctk.CTkLabel(
            left_header,
            text="üìÅ –¢–µ–∫—Å—Ç—É—Ä–∏ –ø—Ä–æ—î–∫—Ç—É",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(side="left", padx=10)
        
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Ñ–∞–π–ª—ñ–≤
        self.file_count_label = ctk.CTkLabel(
            left_header,
            text="0 —Ñ–∞–π–ª—ñ–≤",
            font=ctk.CTkFont(size=12)
        )
        self.file_count_label.pack(side="right", padx=10)
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ (–ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–∏–π)
        self.file_list_frame = ctk.CTkScrollableFrame(
            left_frame,
            label_text="–°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—É—Ä"
        )
        self.file_list_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é –¥–ª—è —Ñ–∞–π–ª—ñ–≤
        self.setup_context_menu()
    
    def setup_right_panel(self, parent):
        """–ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥"""
        right_frame = ctk.CTkFrame(parent)
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–æ—ó –ø–∞–Ω–µ–ª—ñ
        right_header = ctk.CTkFrame(right_frame)
        right_header.pack(fill="x", padx=10, pady=(10, 5))
        
        ctk.CTkLabel(
            right_header,
            text="üñºÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(side="left", padx=10)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–∏ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        zoom_frame = ctk.CTkFrame(right_header)
        zoom_frame.pack(side="right", padx=10)
        
        self.zoom_out_btn = ctk.CTkButton(
            zoom_frame,
            text="üîç-",
            width=40,
            command=self.zoom_out
        )
        self.zoom_out_btn.pack(side="left", padx=2)
        
        self.zoom_label = ctk.CTkLabel(
            zoom_frame,
            text="100%",
            width=60
        )
        self.zoom_label.pack(side="left", padx=5)
        
        self.zoom_in_btn = ctk.CTkButton(
            zoom_frame,
            text="üîç+",
            width=40,
            command=self.zoom_in
        )
        self.zoom_in_btn.pack(side="left", padx=2)
        
        self.fit_btn = ctk.CTkButton(
            zoom_frame,
            text="üìê",
            width=40,
            command=self.fit_to_window
        )
        self.fit_btn.pack(side="left", padx=2)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_frame = ctk.CTkFrame(right_frame)
        self.image_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ü—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
        self.image_canvas = tk.Canvas(
            self.image_frame,
            bg=self.image_frame.cget("fg_color")[1],  # –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
            highlightthickness=0
        )
        
        # –°–∫—Ä–æ–ª–±–∞—Ä–∏
        v_scrollbar = ctk.CTkScrollbar(
            self.image_frame,
            orientation="vertical",
            command=self.image_canvas.yview
        )
        h_scrollbar = ctk.CTkScrollbar(
            self.image_frame,
            orientation="horizontal",
            command=self.image_canvas.xview
        )
        
        self.image_canvas.configure(
            yscrollcommand=v_scrollbar.set,
            xscrollcommand=h_scrollbar.set
        )
        
        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        self.image_canvas.pack(side="left", fill="both", expand=True)
        v_scrollbar.pack(side="right", fill="y")
        h_scrollbar.pack(side="bottom", fill="x")
        
        # –õ–µ–π–±–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_label = ctk.CTkLabel(
            self.image_canvas,
            text="–û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É",
            font=ctk.CTkFont(size=14)
        )
        self.image_canvas.create_window(
            0, 0,
            window=self.image_label,
            anchor="nw"
        )
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å
        info_frame = ctk.CTkFrame(right_frame)
        info_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        # –¢–∞–±–±–∏ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        self.info_tabview = ctk.CTkTabview(info_frame)
        self.info_tabview.pack(fill="x", padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
        self.info_tab = self.info_tabview.add("üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        self.info_text = ctk.CTkTextbox(self.info_tab, height=100)
        self.info_text.pack(fill="x", padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ú–µ—Ç–∞–¥–∞–Ω—ñ"
        self.metadata_tab = self.info_tabview.add("üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω—ñ")
        self.metadata_text = ctk.CTkTextbox(self.metadata_tab, height=100)
        self.metadata_text.pack(fill="x", padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ "–î—ñ—ó"
        self.actions_tab = self.info_tabview.add("‚öôÔ∏è –î—ñ—ó")
        self.setup_actions_tab()
    
    def setup_actions_tab(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –¥—ñ–π"""
        actions_frame = ctk.CTkFrame(self.actions_tab)
        actions_frame.pack(fill="x", padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        self.rename_btn = ctk.CTkButton(
            actions_frame,
            text="‚úèÔ∏è –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏",
            command=self.rename_texture,
            width=140
        )
        self.rename_btn.pack(side="left", padx=5, pady=5)
        
        self.duplicate_btn = ctk.CTkButton(
            actions_frame,
            text="üìã –î—É–±–ª—é–≤–∞—Ç–∏",
            command=self.duplicate_texture,
            width=140
        )
        self.duplicate_btn.pack(side="left", padx=5, pady=5)
        
        self.delete_btn = ctk.CTkButton(
            actions_frame,
            text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
            command=self.delete_texture,
            fg_color="red",
            hover_color="darkred",
            width=140
        )
        self.delete_btn.pack(side="left", padx=5, pady=5)
    
    def setup_status_bar(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ"""
        status_frame = ctk.CTkFrame(self.main_frame)
        status_frame.pack(fill="x", padx=10, pady=(5, 10))
        
        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = ctk.CTkLabel(
            status_frame,
            text="üìä –§–∞–π–ª—ñ–≤: 0 | –†–æ–∑–º—ñ—Ä: 0 MB | –§–æ—Ä–º–∞—Ç–∏: 0",
            font=ctk.CTkFont(size=12)
        )
        self.stats_label.pack(side="left", padx=20, pady=10)
        
        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –ø—Ä–æ–≥—Ä–µ—Å
        self.progress_frame = ctk.CTkFrame(status_frame)
        self.progress_frame.pack(side="right", padx=20, pady=10)
        
        self.progress_label = ctk.CTkLabel(
            self.progress_frame,
            text="–ì–æ—Ç–æ–≤–∏–π",
            font=ctk.CTkFont(size=12)
        )
        self.progress_label.pack(side="left", padx=10)
        
        self.progress_bar = ctk.CTkProgressBar(
            self.progress_frame,
            width=200
        )
        self.progress_bar.pack(side="left", padx=10)
        self.progress_bar.set(0)
    
    def setup_context_menu(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏", command=self.open_texture)
        self.context_menu.add_command(label="üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", command=self.preview_texture)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="‚úèÔ∏è –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏", command=self.rename_texture)
        self.context_menu.add_command(label="üìã –î—É–±–ª—é–≤–∞—Ç–∏", command=self.duplicate_texture)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ PNG", command=self.convert_to_png)
        self.context_menu.add_command(label="‚ö° –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏", command=self.optimize_texture)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", command=self.delete_texture)
    
    # –ú–µ—Ç–æ–¥–∏ –æ–±—Ä–æ–±–∫–∏ –ø–æ–¥—ñ–π
    def toggle_theme(self):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–µ–º–∏"""
        if self.theme_switch.get():
            ctk.set_appearance_mode("dark")
            self.theme_switch.configure(text="üåô –¢–µ–º–Ω–∞")
        else:
            ctk.set_appearance_mode("light")
            self.theme_switch.configure(text="‚òÄÔ∏è –°–≤—ñ—Ç–ª–∞")
    
    def on_filter_changed(self, value):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ñ—ñ–ª—å—Ç—Ä–∞"""
        filter_map = {
            "–í—Å—ñ —Ñ–∞–π–ª–∏": "all",
            "PNG": "png",
            "JPEG": "jpeg",
            "PSD": "psd",
            "SVG": "svg",
            "–Ü–Ω—à—ñ": "other"
        }
        self.current_filter = filter_map.get(value, "all")
        self.refresh_file_list()
    
    def on_sort_changed(self, value):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"""
        sort_map = {
            "–ó–∞ –Ω–∞–∑–≤–æ—é": "name",
            "–ó–∞ —Ä–æ–∑–º—ñ—Ä–æ–º": "size",
            "–ó–∞ –¥–∞—Ç–æ—é": "date",
            "–ó–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º": "format"
        }
        self.sort_mode = sort_map.get(value, "name")
        self.refresh_file_list()
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É)"""
        if not self.parent_window:
            self.root.mainloop()
        else:
            print("–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä –ø—Ä–∞—Ü—é—î —É –≤–±—É–¥–æ–≤–∞–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ")
    
    # –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏
    def refresh_textures(self):
        """–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—É—Ä"""
        if not self.textures_path or not os.path.exists(self.textures_path):
            self.file_items = []
            self.update_file_count()
            return

        self.progress_label.configure(text="–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...")
        self.progress_bar.set(0.1)
        self.root.update()

        # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
        threading.Thread(target=self._scan_textures, daemon=True).start()

    def _scan_textures(self):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ"""
        try:
            if not self.textures_path:
                return

            file_items = []
            supported_extensions = self.format_handler.get_supported_extensions()

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤
            for root, _, files in os.walk(self.textures_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    file_ext = os.path.splitext(file)[1].lower()

                    if file_ext in supported_extensions:
                        relative_path = os.path.relpath(file_path, self.textures_path)
                        format_info = self.format_handler.get_format_info(file_path)

                        try:
                            stat = os.stat(file_path)
                            file_data = {
                                'path': file_path,
                                'relative_path': relative_path,
                                'name': file,
                                'size': stat.st_size,
                                'mtime': stat.st_mtime,
                                'format_info': format_info,
                                'ext': file_ext
                            }
                            file_items.append(file_data)
                        except OSError:
                            continue

            # –û–Ω–æ–≤–∏—Ç–∏ UI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.root.after(0, self._update_file_list, file_items)

        except Exception as e:
            self.root.after(0, self._show_error, f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")

    def _update_file_list(self, file_items):
        """–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –≤ UI"""
        self.file_items = file_items
        self.refresh_file_list()
        self.progress_label.configure(text="–ì–æ—Ç–æ–≤–∏–π")
        self.progress_bar.set(1.0)
        self.root.after(1000, lambda: self.progress_bar.set(0))

    def _show_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É"""
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", message)
        self.progress_label.configure(text="–ü–æ–º–∏–ª–∫–∞")
        self.progress_bar.set(0)

    def refresh_file_list(self):
        """–û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤"""
        # –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫
        for widget in self.file_list_frame.winfo_children():
            widget.destroy()

        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤
        filtered_files = self._filter_files(self.file_items)

        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        sorted_files = self._sort_files(filtered_files)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å–ø–∏—Å–∫—É
        for i, file_data in enumerate(sorted_files):
            self._create_file_item(file_data, i)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.update_file_count()
        self.update_statistics()

    def _filter_files(self, files):
        """–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ç–∏–ø–æ–º"""
        if self.current_filter == "all":
            return files

        filtered = []
        for file_data in files:
            format_name = file_data['format_info']['name'].lower()

            if self.current_filter == "png" and format_name == "png":
                filtered.append(file_data)
            elif self.current_filter == "jpeg" and format_name == "jpeg":
                filtered.append(file_data)
            elif self.current_filter == "psd" and format_name == "psd":
                filtered.append(file_data)
            elif self.current_filter == "svg" and format_name == "svg":
                filtered.append(file_data)
            elif self.current_filter == "other" and format_name not in ["png", "jpeg", "psd", "svg"]:
                filtered.append(file_data)

        return filtered

    def _sort_files(self, files):
        """–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤"""
        if self.sort_mode == "name":
            return sorted(files, key=lambda x: x['name'].lower())
        elif self.sort_mode == "size":
            return sorted(files, key=lambda x: x['size'], reverse=True)
        elif self.sort_mode == "date":
            return sorted(files, key=lambda x: x['mtime'], reverse=True)
        elif self.sort_mode == "format":
            return sorted(files, key=lambda x: x['format_info']['name'])
        else:
            return files

    def _create_file_item(self, file_data, _):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤"""
        item_frame = ctk.CTkFrame(self.file_list_frame)
        item_frame.pack(fill="x", padx=5, pady=2)

        # –Ü–∫–æ–Ω–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
        format_colors = {
            "PNG": "#4CAF50",    # –ó–µ–ª–µ–Ω–∏–π
            "JPEG": "#2196F3",   # –°–∏–Ω—ñ–π
            "PSD": "#9C27B0",    # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π
            "SVG": "#FF9800",    # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
            "TIFF": "#F44336",   # –ß–µ—Ä–≤–æ–Ω–∏–π
            "WebP": "#00BCD4",   # –ë—ñ—Ä—é–∑–æ–≤–∏–π
            "BMP": "#795548",    # –ö–æ—Ä–∏—á–Ω–µ–≤–∏–π
            "GIF": "#FFEB3B"     # –ñ–æ–≤—Ç–∏–π
        }

        format_name = file_data['format_info']['name']
        color = format_colors.get(format_name, "#9E9E9E")

        format_label = ctk.CTkLabel(
            item_frame,
            text=format_name,
            width=50,
            fg_color=color,
            corner_radius=5,
            font=ctk.CTkFont(size=10, weight="bold")
        )
        format_label.pack(side="left", padx=5, pady=5)

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª
        info_frame = ctk.CTkFrame(item_frame)
        info_frame.pack(side="left", fill="x", expand=True, padx=5, pady=5)

        # –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É
        name_label = ctk.CTkLabel(
            info_frame,
            text=file_data['name'],
            font=ctk.CTkFont(weight="bold"),
            anchor="w"
        )
        name_label.pack(fill="x", padx=5)

        # –†–æ–∑–º—ñ—Ä —Ç–∞ —à–ª—è—Ö
        size_mb = file_data['size'] / (1024 * 1024)
        size_text = f"{size_mb:.2f} MB" if size_mb >= 1 else f"{file_data['size'] / 1024:.1f} KB"

        details_label = ctk.CTkLabel(
            info_frame,
            text=f"{size_text} ‚Ä¢ {file_data['relative_path']}",
            font=ctk.CTkFont(size=10),
            anchor="w",
            text_color="gray"
        )
        details_label.pack(fill="x", padx=5)

        # –ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É
        select_btn = ctk.CTkButton(
            item_frame,
            text="üëÅÔ∏è",
            width=40,
            command=lambda: self.select_file(file_data)
        )
        select_btn.pack(side="right", padx=5, pady=5)

        # –ü—Ä–∏–≤'—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        def show_context_menu(event):
            self.selected_file = file_data
            self.context_menu.post(event.x_root, event.y_root)

        item_frame.bind("<Button-3>", show_context_menu)  # –ü—Ä–∞–≤–∞ –∫–Ω–æ–ø–∫–∞ –º–∏—à—ñ

    def select_file(self, file_data):
        """–í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É"""
        self.selected_file = file_data
        self.update_preview(file_data)
        self.update_info_panel(file_data)

    def update_file_count(self):
        """–û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ñ–∞–π–ª—ñ–≤"""
        count = len([widget for widget in self.file_list_frame.winfo_children()])
        self.file_count_label.configure(text=f"{count} —Ñ–∞–π–ª—ñ–≤")

    def update_statistics(self):
        """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.file_items:
            self.stats_label.configure(text="üìä –§–∞–π–ª—ñ–≤: 0 | –†–æ–∑–º—ñ—Ä: 0 MB | –§–æ—Ä–º–∞—Ç–∏: 0")
            return

        total_files = len(self.file_items)
        total_size = sum(item['size'] for item in self.file_items)
        total_size_mb = total_size / (1024 * 1024)

        formats = set(item['format_info']['name'] for item in self.file_items)
        format_count = len(formats)

        self.stats_label.configure(
            text=f"üìä –§–∞–π–ª—ñ–≤: {total_files} | –†–æ–∑–º—ñ—Ä: {total_size_mb:.1f} MB | –§–æ—Ä–º–∞—Ç–∏: {format_count}"
        )

    def update_preview(self, file_data):
        """–û–Ω–æ–≤–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            pil_image = self.format_handler.load_image_as_pil(file_data['path'])
            if pil_image is None:
                self.image_label.configure(
                    text=f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏\n{file_data['name']}",
                    image=None
                )
                return

            # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            display_size = self._calculate_display_size(pil_image.size)
            resized_image = pil_image.resize(display_size, Image.Resampling.LANCZOS)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ PhotoImage
            photo = ImageTk.PhotoImage(resized_image)

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª–∞
            self.image_label.configure(
                text="",
                image=photo
            )

            # –û–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä canvas
            self.image_canvas.configure(scrollregion=self.image_canvas.bbox("all"))

        except Exception as e:
            self.image_label.configure(
                text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:\n{str(e)}",
                image=None
            )

    def _calculate_display_size(self, original_size):
        """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        max_width = 400
        max_height = 400

        width, height = original_size

        # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –º–∞—Å—à—Ç–∞–±
        width = int(width * self.zoom_level)
        height = int(height * self.zoom_level)

        # –û–±–º–µ–∂–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º (—Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º–µ–Ω—à–µ–Ω–Ω—ñ)
        if self.zoom_level <= 1.0:
            if width > max_width or height > max_height:
                ratio = min(max_width / width, max_height / height)
                width = int(width * ratio)
                height = int(height * ratio)

        return (width, height)

    def update_info_panel(self, file_data):
        """–û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—É –ø–∞–Ω–µ–ª—å"""
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        info_text = f"""–§–∞–π–ª: {file_data['name']}
–®–ª—è—Ö: {file_data['relative_path']}
–§–æ—Ä–º–∞—Ç: {file_data['format_info']['name']}
–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {self._format_file_size(file_data['size'])}
–î–∞—Ç–∞ –∑–º—ñ–Ω–∏: {datetime.fromtimestamp(file_data['mtime']).strftime('%d.%m.%Y %H:%M')}

–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è' if file_data['format_info']['native'] else '‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó'}
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: {'–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥–ª—è RimWorld' if file_data['format_info']['name'] == 'PNG' else '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ PNG'}"""

        self.info_text.delete("0.0", "end")
        self.info_text.insert("0.0", info_text)

        # –ú–µ—Ç–∞–¥–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        try:
            image_info = self.format_handler.get_image_info(file_data['path'])
            if image_info:
                metadata_text = f"""–†–æ–∑–º—ñ—Ä–∏: {image_info['width']} x {image_info['height']} –ø—ñ–∫—Å–µ–ª—ñ–≤
–†–µ–∂–∏–º –∫–æ–ª—å–æ—Ä—É: {image_info['mode']}
–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å: {'–¢–∞–∫' if image_info.get('has_transparency', False) else '–ù—ñ'}
DPI: {image_info.get('metadata', {}).get('dpi', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}

–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
{json.dumps(image_info.get('metadata', {}), indent=2, ensure_ascii=False) if image_info.get('metadata') else '–ú–µ—Ç–∞–¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ'}"""
            else:
                metadata_text = "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"

        except Exception as e:
            metadata_text = f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö: {e}"

        self.metadata_text.delete("0.0", "end")
        self.metadata_text.insert("0.0", metadata_text)

    def _format_file_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É"""
        if size_bytes >= 1024 * 1024:
            return f"{size_bytes / (1024 * 1024):.2f} MB"
        elif size_bytes >= 1024:
            return f"{size_bytes / 1024:.1f} KB"
        else:
            return f"{size_bytes} –±–∞–π—Ç"

    def zoom_in(self):
        """–ó–±—ñ–ª—å—à–∏—Ç–∏ –º–∞—Å—à—Ç–∞–±"""
        self.zoom_level = min(self.zoom_level * 1.25, 5.0)
        self.zoom_label.configure(text=f"{int(self.zoom_level * 100)}%")
        
    def zoom_out(self):
        """–ó–º–µ–Ω—à–∏—Ç–∏ –º–∞—Å—à—Ç–∞–±"""
        self.zoom_level = max(self.zoom_level / 1.25, 0.1)
        self.zoom_label.configure(text=f"{int(self.zoom_level * 100)}%")
        
    def fit_to_window(self):
        """–ü—ñ–¥—ñ–≥–Ω–∞—Ç–∏ –ø—ñ–¥ –≤—ñ–∫–Ω–æ"""
        self.zoom_level = 1.0
        self.zoom_label.configure(text="100%")
        
    def import_texture(self):
        """–Ü–º–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç—É—Ä–∏"""
        if not self.textures_path:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ü—Ä–æ—î–∫—Ç –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ")
            return

        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä —Ñ–∞–π–ª—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
        try:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä
            _ = self.format_handler.get_file_dialog_filter()
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            filetypes = [
                ("–í—Å—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ", "*.png *.jpg *.jpeg *.bmp *.gif *.tiff *.webp *.psd *.svg"),
                ("PNG —Ñ–∞–π–ª–∏", "*.png"),
                ("JPEG —Ñ–∞–π–ª–∏", "*.jpg *.jpeg"),
                ("PSD —Ñ–∞–π–ª–∏", "*.psd"),
                ("SVG —Ñ–∞–π–ª–∏", "*.svg"),
                ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
            ]
        except:
            # Fallback —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º
            filetypes = [
                ("–í—Å—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ", "*.png *.jpg *.jpeg *.bmp *.gif *.tiff *.webp *.psd *.svg"),
                ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
            ]

        file_path = filedialog.askopenfilename(
            title="–û–±–µ—Ä—ñ—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É",
            filetypes=filetypes
        )

        if file_path:
            try:
                print(f"üîç –Ü–º–ø–æ—Ä—Ç —Ñ–∞–π–ª—É: {file_path}")

                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
                if not os.path.exists(file_path):
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {file_path}")
                    return

                if not os.access(file_path, os.R_OK):
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {file_path}")
                    return

                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —Ñ–æ—Ä–º–∞—Ç—É
                if not self.format_handler.can_handle_format(file_path):
                    ext = os.path.splitext(file_path)[1].lower()
                    format_info = self.format_handler.get_format_info(file_path)

                    if not format_info.get('native', True):
                        missing_deps = self.format_handler.get_missing_dependencies()
                        if missing_deps:
                            messagebox.showerror(
                                "–í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
                                f"–î–ª—è –æ–±—Ä–æ–±–∫–∏ {ext} —Ñ–∞–π–ª—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏:\n" + "\n".join(missing_deps)
                            )
                            return

                    messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", f"–§–æ—Ä–º–∞—Ç {ext} –º–æ–∂–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è")

                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
                if not os.path.exists(self.textures_path):
                    try:
                        os.makedirs(self.textures_path, exist_ok=True)
                        print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: {self.textures_path}")
                    except Exception as e:
                        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É —Ç–µ–∫—Å—Ç—É—Ä: {e}")
                        return

                # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–ª—è—Ö—ñ–≤
                filename = os.path.basename(file_path)
                dest_path = os.path.join(self.textures_path, filename)

                print(f"üìÑ –î–∂–µ—Ä–µ–ª–æ: {file_path}")
                print(f"üìÑ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {dest_path}")

                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î
                if os.path.exists(dest_path):
                    result = messagebox.askyesno(
                        "–§–∞–π–ª —ñ—Å–Ω—É—î",
                        f"–§–∞–π–ª {filename} –≤–∂–µ —ñ—Å–Ω—É—î. –ó–∞–º—ñ–Ω–∏—Ç–∏?"
                    )
                    if not result:
                        return

                # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
                print("üñºÔ∏è –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
                test_image = self.format_handler.load_image_as_pil(file_path)
                if test_image is None:
                    result = messagebox.askyesno(
                        "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è",
                        f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ {os.path.splitext(filename)[1].upper()}.\n"
                        "–ú–æ–∂–ª–∏–≤–æ, —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n\n"
                        "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç?"
                    )
                    if not result:
                        return
                else:
                    print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–µ: {test_image.size}")

                # –ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª
                import shutil
                print("üìã –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É...")
                shutil.copy2(file_path, dest_path)

                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
                if os.path.exists(dest_path):
                    file_size = os.path.getsize(dest_path)
                    print(f"‚úÖ –§–∞–π–ª —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ ({file_size} –±–∞–π—Ç)")
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–¢–µ–∫—Å—Ç—É—Ä—É {filename} —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                    self.refresh_textures()
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–§–∞–π–ª –Ω–µ –±—É–ª–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ")

            except FileNotFoundError as e:
                error_msg = f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}"
                print(f"‚ùå {error_msg}")
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error_msg)
            except PermissionError as e:
                error_msg = f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ —Ñ–∞–π–ª—É: {e}"
                print(f"‚ùå {error_msg}")
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error_msg)
            except Exception as e:
                error_msg = f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä—É: {type(e).__name__}: {e}"
                print(f"‚ùå {error_msg}")
                import traceback
                traceback.print_exc()
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error_msg)

    def batch_import(self):
        """–ë–∞—Ç—á-—ñ–º–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç—É—Ä"""
        if not self.textures_path:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ü—Ä–æ—î–∫—Ç –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ")
            return

        file_paths = filedialog.askopenfilenames(
            title="–û–±–µ—Ä—ñ—Ç—å —Ç–µ–∫—Å—Ç—É—Ä–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É",
            filetypes=[
                ("–í—Å—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ", "*.png *.jpg *.jpeg *.bmp *.gif *.tiff *.webp *.psd *.svg"),
                ("PNG —Ñ–∞–π–ª–∏", "*.png"),
                ("JPEG —Ñ–∞–π–ª–∏", "*.jpg *.jpeg"),
                ("PSD —Ñ–∞–π–ª–∏", "*.psd"),
                ("SVG —Ñ–∞–π–ª–∏", "*.svg"),
                ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
            ]
        )

        if file_paths:
            print(f"üîç –ë–∞—Ç—á-—ñ–º–ø–æ—Ä—Ç {len(file_paths)} —Ñ–∞–π–ª(—ñ–≤)")

            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            if not os.path.exists(self.textures_path):
                try:
                    os.makedirs(self.textures_path, exist_ok=True)
                    print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: {self.textures_path}")
                except Exception as e:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É —Ç–µ–∫—Å—Ç—É—Ä: {e}")
                    return

            imported_count = 0
            errors = []
            warnings = []

            for i, file_path in enumerate(file_paths):
                try:
                    print(f"üìÑ –û–±—Ä–æ–±–∫–∞ {i+1}/{len(file_paths)}: {os.path.basename(file_path)}")

                    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—É
                    if not os.path.exists(file_path):
                        errors.append(f"{os.path.basename(file_path)}: —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î")
                        continue

                    if not os.access(file_path, os.R_OK):
                        errors.append(f"{os.path.basename(file_path)}: –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è")
                        continue

                    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —Ñ–æ—Ä–º–∞—Ç—É
                    if not self.format_handler.can_handle_format(file_path):
                        ext = os.path.splitext(file_path)[1].lower()
                        format_info = self.format_handler.get_format_info(file_path)

                        if not format_info.get('native', True):
                            warnings.append(f"{os.path.basename(file_path)}: —Ñ–æ—Ä–º–∞—Ç {ext} –º–æ–∂–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è")

                    filename = os.path.basename(file_path)
                    dest_path = os.path.join(self.textures_path, filename)

                    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç —ñ–º–µ–Ω
                    if os.path.exists(dest_path):
                        base_name, ext = os.path.splitext(filename)
                        counter = 1
                        while os.path.exists(dest_path):
                            new_filename = f"{base_name}_{counter}{ext}"
                            dest_path = os.path.join(self.textures_path, new_filename)
                            counter += 1
                        warnings.append(f"{filename} –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –≤ {os.path.basename(dest_path)}")

                    # –ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª
                    import shutil
                    shutil.copy2(file_path, dest_path)

                    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
                    if os.path.exists(dest_path):
                        imported_count += 1
                    else:
                        errors.append(f"{filename}: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏")

                except Exception as e:
                    filename = os.path.basename(file_path) if file_path else "–Ω–µ–≤—ñ–¥–æ–º–∏–π —Ñ–∞–π–ª"
                    errors.append(f"{filename}: {type(e).__name__}: {e}")

            # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            message_parts = [f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {imported_count} –∑ {len(file_paths)} —Ñ–∞–π–ª(—ñ–≤)"]

            if warnings:
                message_parts.append(f"\n–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ({len(warnings)}):")
                message_parts.append("\n".join(warnings[:3]))
                if len(warnings) > 3:
                    message_parts.append(f"... —Ç–∞ —â–µ {len(warnings) - 3}")

            if errors:
                message_parts.append(f"\n–ü–æ–º–∏–ª–∫–∏ ({len(errors)}):")
                message_parts.append("\n".join(errors[:3]))
                if len(errors) > 3:
                    message_parts.append(f"... —Ç–∞ —â–µ {len(errors) - 3}")

            message = "\n".join(message_parts)

            if errors:
                messagebox.showwarning("–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á-—ñ–º–ø–æ—Ä—Ç—É", message)
            else:
                messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á-—ñ–º–ø–æ—Ä—Ç—É", message)

            print(f"‚úÖ –ë–∞—Ç—á-—ñ–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {imported_count} —É—Å–ø—ñ—à–Ω–æ, {len(errors)} –ø–æ–º–∏–ª–æ–∫")
            self.refresh_textures()

    def export_texture(self):
        """–ï–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç—É—Ä–∏"""
        if not self.selected_file:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
            return

        file_path = filedialog.asksaveasfilename(
            title="–ï–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç—É—Ä–∏",
            defaultextension=".png",
            filetypes=[("PNG", "*.png"), ("JPEG", "*.jpg"), ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")]
        )

        if file_path:
            try:
                import shutil
                shutil.copy2(self.selected_file['path'], file_path)
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–¢–µ–∫—Å—Ç—É—Ä—É –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏: {e}")

    def convert_to_png(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ PNG"""
        if not self.selected_file:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó")
            return

        if not self.textures_path:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ü—Ä–æ—î–∫—Ç –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ")
            return

        if self.selected_file['format_info']['name'] == 'PNG':
            messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–§–∞–π–ª –≤–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ PNG")
            return

        try:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
            base_name = os.path.splitext(self.selected_file['name'])[0]
            new_name = f"{base_name}.png"
            new_path = os.path.join(self.textures_path, new_name)

            # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏
            success = self.format_handler.convert_to_png(
                self.selected_file['path'],
                new_path
            )

            if success:
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ {new_name}")
                self.refresh_textures()
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª")

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")

    def optimize_texture(self):
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É—Ä–∏"""
        if not self.selected_file:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
            return

        if not self.textures_path:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ü—Ä–æ—î–∫—Ç –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ")
            return

        # –î—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        dialog = OptimizationDialog(self.root, self.selected_file)
        if dialog.result:
            try:
                settings = dialog.result

                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—É –≤–µ—Ä—Å—ñ—é
                base_name = os.path.splitext(self.selected_file['name'])[0]
                optimized_name = f"{base_name}_optimized.png"
                optimized_path = os.path.join(self.textures_path, optimized_name)

                success = self.format_handler.optimize_image(
                    self.selected_file['path'],
                    optimized_path,
                    quality=settings['quality'],
                    max_size=settings['max_size']
                )

                if success:
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–§–∞–π–ª –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ: {optimized_name}")
                    self.refresh_textures()
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Ñ–∞–π–ª")

            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {e}")

    def delete_texture(self):
        """–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä—É"""
        if not self.selected_file:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return

        result = messagebox.askyesno(
            "–í–∏–¥–∞–ª–µ–Ω–Ω—è",
            f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ {self.selected_file['name']}?\n\n–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏."
        )

        if result:
            try:
                os.remove(self.selected_file['path'])
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–¢–µ–∫—Å—Ç—É—Ä—É –≤–∏–¥–∞–ª–µ–Ω–æ")
                self.selected_file = None
                self.refresh_textures()
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª: {e}")

    def rename_texture(self):
        """–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä—É"""
        if not self.selected_file:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è")
            return

        if not self.textures_path:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ü—Ä–æ—î–∫—Ç –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ")
            return

        # –ü—Ä–æ—Å—Ç–∏–π –¥—ñ–∞–ª–æ–≥ –≤–≤–µ–¥–µ–Ω–Ω—è
        from tkinter import simpledialog

        current_name = os.path.splitext(self.selected_file['name'])[0]
        new_name = simpledialog.askstring(
            "–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è",
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É:",
            initialvalue=current_name
        )

        if new_name and new_name != current_name:
            try:
                ext = os.path.splitext(self.selected_file['name'])[1]
                new_filename = f"{new_name}{ext}"
                new_path = os.path.join(self.textures_path, new_filename)

                if os.path.exists(new_path):
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–§–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î")
                    return

                os.rename(self.selected_file['path'], new_path)
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–§–∞–π–ª –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞ {new_filename}")
                self.refresh_textures()

            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ñ–∞–π–ª: {e}")

    def duplicate_texture(self):
        """–î—É–±–ª—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä—É"""
        if not self.selected_file:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è")
            return

        if not self.textures_path:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ü—Ä–æ—î–∫—Ç –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ")
            return

        try:
            base_name = os.path.splitext(self.selected_file['name'])[0]
            ext = os.path.splitext(self.selected_file['name'])[1]

            # –ó–Ω–∞–π—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—É –Ω–∞–∑–≤—É
            counter = 1
            while True:
                new_name = f"{base_name}_copy{counter}{ext}"
                new_path = os.path.join(self.textures_path, new_name)
                if not os.path.exists(new_path):
                    break
                counter += 1

            import shutil
            shutil.copy2(self.selected_file['path'], new_path)
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–§–∞–π–ª –¥—É–±–ª—å–æ–≤–∞–Ω–æ: {new_name}")
            self.refresh_textures()

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥—É–±–ª—é–≤–∞—Ç–∏ —Ñ–∞–π–ª: {e}")

    def open_texture(self):
        """–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä—É –≤ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–º—É —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ"""
        if not self.selected_file:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è")
            return

        try:
            import subprocess
            import platform

            if platform.system() == 'Windows':
                os.startfile(self.selected_file['path'])
            elif platform.system() == 'Darwin':  # macOS
                subprocess.run(['open', self.selected_file['path']])
            else:  # Linux
                subprocess.run(['xdg-open', self.selected_file['path']])

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª: {e}")

    def preview_texture(self):
        """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä—É –≤ –æ–∫—Ä–µ–º–æ–º—É –≤—ñ–∫–Ω—ñ"""
        if not self.selected_file:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
            return

        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
        PreviewWindow(self.root, self.selected_file, self.format_handler)


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–ª–∞—Å–∏
class OptimizationDialog:
    """–î—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""

    def __init__(self, parent, file_data):
        self.result = None

        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ
        self.dialog = ctk.CTkToplevel(parent)
        self.dialog.title("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        self.dialog.geometry("400x300")
        self.dialog.transient(parent)
        self.dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ
        self.dialog.geometry("+%d+%d" % (
            parent.winfo_rootx() + 50,
            parent.winfo_rooty() + 50
        ))

        self.setup_ui(file_data)

        # –ß–µ–∫–∞—Ç–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É
        self.dialog.wait_window()

    def setup_ui(self, file_data):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI –¥—ñ–∞–ª–æ–≥—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self.dialog,
            text=f"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: {file_data['name']}",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=20)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ
        quality_frame = ctk.CTkFrame(self.dialog)
        quality_frame.pack(fill="x", padx=20, pady=10)

        ctk.CTkLabel(quality_frame, text="–Ø–∫—ñ—Å—Ç—å JPEG (%):", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))

        self.quality_slider = ctk.CTkSlider(
            quality_frame,
            from_=10,
            to=100,
            number_of_steps=90
        )
        self.quality_slider.set(85)
        self.quality_slider.pack(fill="x", padx=10, pady=5)

        self.quality_label = ctk.CTkLabel(quality_frame, text="85%")
        self.quality_label.pack(padx=10, pady=(0, 10))

        self.quality_slider.configure(command=self.update_quality_label)

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        size_frame = ctk.CTkFrame(self.dialog)
        size_frame.pack(fill="x", padx=20, pady=10)

        ctk.CTkLabel(size_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))

        self.size_var = tk.StringVar(value="1024x1024")
        size_combo = ctk.CTkComboBox(
            size_frame,
            values=["–ë–µ–∑ –æ–±–º–µ–∂–µ–Ω—å", "512x512", "1024x1024", "2048x2048", "4096x4096"],
            variable=self.size_var
        )
        size_combo.pack(fill="x", padx=10, pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(self.dialog)
        button_frame.pack(fill="x", padx=20, pady=20)

        cancel_btn = ctk.CTkButton(
            button_frame,
            text="–°–∫–∞—Å—É–≤–∞—Ç–∏",
            command=self.cancel
        )
        cancel_btn.pack(side="left", padx=10)

        ok_btn = ctk.CTkButton(
            button_frame,
            text="–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏",
            command=self.accept
        )
        ok_btn.pack(side="right", padx=10)

    def update_quality_label(self, value):
        """–û–Ω–æ–≤–∏—Ç–∏ –ª–µ–π–±–ª —è–∫–æ—Å—Ç—ñ"""
        self.quality_label.configure(text=f"{int(value)}%")

    def accept(self):
        """–ü—Ä–∏–π–Ω—è—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        quality = int(self.quality_slider.get())

        size_text = self.size_var.get()
        if size_text == "–ë–µ–∑ –æ–±–º–µ–∂–µ–Ω—å":
            max_size = None
        else:
            size = int(size_text.split('x')[0])
            max_size = (size, size)

        self.result = {
            'quality': quality,
            'max_size': max_size
        }

        self.dialog.destroy()

    def cancel(self):
        """–°–∫–∞—Å—É–≤–∞—Ç–∏"""
        self.result = None
        self.dialog.destroy()


class PreviewWindow:
    """–í—ñ–∫–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É"""

    def __init__(self, parent, file_data, format_handler):
        self.file_data = file_data
        self.format_handler = format_handler

        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ
        self.window = ctk.CTkToplevel(parent)
        self.window.title(f"–ü–µ—Ä–µ–≥–ª—è–¥: {file_data['name']}")
        self.window.geometry("800x600")

        self.setup_ui()
        self.load_image()

    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkFrame(self.window)
        header.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(
            header,
            text=self.file_data['name'],
            font=ctk.CTkFont(size=18, weight="bold")
        ).pack(pady=10)

        # –û–±–ª–∞—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_frame = ctk.CTkFrame(self.window)
        self.image_frame.pack(fill="both", expand=True, padx=10, pady=10)

        self.image_label = ctk.CTkLabel(
            self.image_frame,
            text="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."
        )
        self.image_label.pack(expand=True)

    def load_image(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            pil_image = self.format_handler.load_image_as_pil(self.file_data['path'])
            if pil_image:
                # –ú–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                max_size = (700, 500)
                pil_image.thumbnail(max_size, Image.Resampling.LANCZOS)

                photo = ImageTk.PhotoImage(pil_image)
                self.image_label.configure(image=photo, text="")
            else:
                self.image_label.configure(text="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        except Exception as e:
            self.image_label.configure(text=f"–ü–æ–º–∏–ª–∫–∞: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üé® –ó–∞–ø—É—Å–∫ CustomTkinter –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä")
    
    # –¢–µ—Å—Ç–æ–≤–∏–π —à–ª—è—Ö –¥–æ –ø—Ä–æ—î–∫—Ç—É
    test_project_path = os.path.join(os.getcwd(), "test_project")
    
    try:
        app = TextureManagerCustomTkinter(test_project_path)
        app.run()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
