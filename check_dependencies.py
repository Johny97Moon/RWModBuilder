#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π RimWorld Mod Builder
"""

import sys
import importlib.util

def check_dependency(name, import_name=None, optional=False):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–¥–Ω—ñ—î—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
    if import_name is None:
        import_name = name.replace('-', '_')
    
    try:
        spec = importlib.util.find_spec(import_name)
        if spec is None:
            status = "‚ùå –ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û"
            if optional:
                status += " (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞)"
            return False, status
        
        module = importlib.import_module(import_name)
        version = getattr(module, '__version__', '–Ω–µ–≤—ñ–¥–æ–º–∞ –≤–µ—Ä—Å—ñ—è')
        status = f"‚úÖ {version}"
        return True, status
        
    except Exception as e:
        status = f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}"
        if optional:
            status += " (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞)"
        return False, status

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π RimWorld Mod Builder")
    print("=" * 50)
    
    # Python –≤–µ—Ä—Å—ñ—è
    print(f"üêç Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    
    # –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    print("\nüì¶ –û–ë–û–í'–Ø–ó–ö–û–í–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü:")
    required_deps = [
        ("customtkinter", "customtkinter"),
        ("Pillow", "PIL"),
        ("packaging", "packaging"),
    ]
    
    all_required_ok = True
    for name, import_name in required_deps:
        ok, status = check_dependency(name, import_name)
        print(f"  {name}: {status}")
        if not ok:
            all_required_ok = False
    
    # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü:")
    recommended_deps = [
        ("lxml", "lxml"),
        ("colorama", "colorama"),
        ("pytest", "pytest"),
    ]
    
    for name, import_name in recommended_deps:
        ok, status = check_dependency(name, import_name, optional=True)
        print(f"  {name}: {status}")
    
    # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    print("\nüîß –û–ü–¶–Ü–û–ù–ê–õ–¨–ù–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü:")
    optional_deps = [
        ("psd-tools", "psd_tools"),
        ("cairosvg", "cairosvg"),
        ("imageio", "imageio"),
        ("psutil", "psutil"),
        ("requests", "requests"),
    ]
    
    for name, import_name in optional_deps:
        ok, status = check_dependency(name, import_name, optional=True)
        print(f"  {name}: {status}")
    
    # –°–∏—Å—Ç–µ–º–Ω—ñ –º–æ–¥—É–ª—ñ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞)
    print("\nüêç –°–¢–ê–ù–î–ê–†–¢–ù–ê –ë–Ü–ë–õ–Ü–û–¢–ï–ö–ê PYTHON:")
    stdlib_modules = [
        "tkinter",
        "xml.etree.ElementTree",
        "json",
        "os",
        "sys",
        "pathlib",
        "threading",
        "subprocess",
    ]
    
    for module_name in stdlib_modules:
        ok, status = check_dependency(module_name, module_name)
        print(f"  {module_name}: {status}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    if all_required_ok:
        print("üéâ –í–°–Ü –û–ë–û–í'–Ø–ó–ö–û–í–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –í–°–¢–ê–ù–û–í–õ–ï–ù–Ü!")
        print("‚úÖ RimWorld Mod Builder –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É")
    else:
        print("‚ö†Ô∏è –î–ï–Ø–ö–Ü –û–ë–û–í'–Ø–ó–ö–û–í–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –í–Ü–î–°–£–¢–ù–Ü!")
        print("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        print("\nüí° –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:")
        print("pip install -r requirements.txt")
    
    print("\nüìö –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
    print("  - –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø–æ–∫—Ä–∞—â—É—é—Ç—å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å")
    print("  - psd-tools –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ PSD —Ñ–∞–π–ª—ñ–≤")
    print("  - lxml –ø–æ–∫—Ä–∞—â—É—î XML –≤–∞–ª—ñ–¥–∞—Ü—ñ—é")
    print("  - –í—Å—ñ —ñ–Ω—à—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ")

if __name__ == "__main__":
    main()
